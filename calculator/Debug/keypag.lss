
keypag.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001e48  00001edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800090  00800090  00001f0c  2**0
                  ALLOC
  3 .stab         00001ce0  00000000  00000000  00001f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000119a  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005036  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008918  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000094d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <main>
      8a:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enumSetPortDirection>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"


DIO_ErrorStatus DIO_enumSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_enumSetPortDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_enumSetPortDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port)
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	3d 83       	std	Y+5, r19	; 0x05
     b64:	2c 83       	std	Y+4, r18	; 0x04
     b66:	8c 81       	ldd	r24, Y+4	; 0x04
     b68:	9d 81       	ldd	r25, Y+5	; 0x05
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	91 05       	cpc	r25, r1
     b6e:	d1 f0       	breq	.+52     	; 0xba4 <DIO_enumSetPortDirection+0x5e>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <DIO_enumSetPortDirection+0x3e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	61 f0       	breq	.+24     	; 0xb9a <DIO_enumSetPortDirection+0x54>
     b82:	1f c0       	rjmp	.+62     	; 0xbc2 <DIO_enumSetPortDirection+0x7c>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	81 f0       	breq	.+32     	; 0xbae <DIO_enumSetPortDirection+0x68>
     b8e:	8c 81       	ldd	r24, Y+4	; 0x04
     b90:	9d 81       	ldd	r25, Y+5	; 0x05
     b92:	83 30       	cpi	r24, 0x03	; 3
     b94:	91 05       	cpc	r25, r1
     b96:	81 f0       	breq	.+32     	; 0xbb8 <DIO_enumSetPortDirection+0x72>
     b98:	14 c0       	rjmp	.+40     	; 0xbc2 <DIO_enumSetPortDirection+0x7c>
	{
	case DIO_PORTA : DDRA_REG = Copy_u8Direction; break;
     b9a:	ea e3       	ldi	r30, 0x3A	; 58
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	80 83       	st	Z, r24
     ba2:	10 c0       	rjmp	.+32     	; 0xbc4 <DIO_enumSetPortDirection+0x7e>
	case DIO_PORTB : DDRB_REG = Copy_u8Direction; break;
     ba4:	e7 e3       	ldi	r30, 0x37	; 55
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	80 83       	st	Z, r24
     bac:	0b c0       	rjmp	.+22     	; 0xbc4 <DIO_enumSetPortDirection+0x7e>
	case DIO_PORTC : DDRC_REG = Copy_u8Direction; break;
     bae:	e4 e3       	ldi	r30, 0x34	; 52
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	80 83       	st	Z, r24
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <DIO_enumSetPortDirection+0x7e>
	case DIO_PORTD : DDRD_REG = Copy_u8Direction; break;
     bb8:	e1 e3       	ldi	r30, 0x31	; 49
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	80 83       	st	Z, r24
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <DIO_enumSetPortDirection+0x7e>
	default : LOC_enumState = DIO_NOK ; break;
     bc2:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <DIO_enumSetPinDirection>:
DIO_ErrorStatus DIO_enumSetPinDirection(u8 Copy_u8Port , u8 Copy_u8PinNumber , u8 Copy_u8Direction)
{
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	00 d0       	rcall	.+0      	; 0xbdc <DIO_enumSetPinDirection+0x6>
     bdc:	00 d0       	rcall	.+0      	; 0xbde <DIO_enumSetPinDirection+0x8>
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <DIO_enumSetPinDirection+0xa>
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	8a 83       	std	Y+2, r24	; 0x02
     be6:	6b 83       	std	Y+3, r22	; 0x03
     be8:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinNumber >= DIO_PIN0 && Copy_u8PinNumber <= DIO_PIN7)
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	88 30       	cpi	r24, 0x08	; 8
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <DIO_enumSetPinDirection+0x20>
     bf4:	e8 c0       	rjmp	.+464    	; 0xdc6 <DIO_enumSetPinDirection+0x1f0>
	{
		switch(Copy_u8Port)
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	3e 83       	std	Y+6, r19	; 0x06
     bfe:	2d 83       	std	Y+5, r18	; 0x05
     c00:	8d 81       	ldd	r24, Y+5	; 0x05
     c02:	9e 81       	ldd	r25, Y+6	; 0x06
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	91 05       	cpc	r25, r1
     c08:	09 f4       	brne	.+2      	; 0xc0c <DIO_enumSetPinDirection+0x36>
     c0a:	48 c0       	rjmp	.+144    	; 0xc9c <DIO_enumSetPinDirection+0xc6>
     c0c:	2d 81       	ldd	r18, Y+5	; 0x05
     c0e:	3e 81       	ldd	r19, Y+6	; 0x06
     c10:	22 30       	cpi	r18, 0x02	; 2
     c12:	31 05       	cpc	r19, r1
     c14:	2c f4       	brge	.+10     	; 0xc20 <DIO_enumSetPinDirection+0x4a>
     c16:	8d 81       	ldd	r24, Y+5	; 0x05
     c18:	9e 81       	ldd	r25, Y+6	; 0x06
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	71 f0       	breq	.+28     	; 0xc3a <DIO_enumSetPinDirection+0x64>
     c1e:	d1 c0       	rjmp	.+418    	; 0xdc2 <DIO_enumSetPinDirection+0x1ec>
     c20:	2d 81       	ldd	r18, Y+5	; 0x05
     c22:	3e 81       	ldd	r19, Y+6	; 0x06
     c24:	22 30       	cpi	r18, 0x02	; 2
     c26:	31 05       	cpc	r19, r1
     c28:	09 f4       	brne	.+2      	; 0xc2c <DIO_enumSetPinDirection+0x56>
     c2a:	69 c0       	rjmp	.+210    	; 0xcfe <DIO_enumSetPinDirection+0x128>
     c2c:	8d 81       	ldd	r24, Y+5	; 0x05
     c2e:	9e 81       	ldd	r25, Y+6	; 0x06
     c30:	83 30       	cpi	r24, 0x03	; 3
     c32:	91 05       	cpc	r25, r1
     c34:	09 f4       	brne	.+2      	; 0xc38 <DIO_enumSetPinDirection+0x62>
     c36:	94 c0       	rjmp	.+296    	; 0xd60 <DIO_enumSetPinDirection+0x18a>
     c38:	c4 c0       	rjmp	.+392    	; 0xdc2 <DIO_enumSetPinDirection+0x1ec>
		{
		case DIO_PORTA :
			if(Copy_u8Direction == DIO_OUTPUT){SET_BIT(DDRA_REG,Copy_u8PinNumber);}
     c3a:	8c 81       	ldd	r24, Y+4	; 0x04
     c3c:	81 30       	cpi	r24, 0x01	; 1
     c3e:	a1 f4       	brne	.+40     	; 0xc68 <DIO_enumSetPinDirection+0x92>
     c40:	aa e3       	ldi	r26, 0x3A	; 58
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	ea e3       	ldi	r30, 0x3A	; 58
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <DIO_enumSetPinDirection+0x88>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <DIO_enumSetPinDirection+0x84>
     c62:	84 2b       	or	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	b0 c0       	rjmp	.+352    	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
			else if(Copy_u8Direction == DIO_INPUT)
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	88 23       	and	r24, r24
     c6c:	a9 f4       	brne	.+42     	; 0xc98 <DIO_enumSetPinDirection+0xc2>
			{
				CLEAR_BIT(DDRA_REG,Copy_u8PinNumber);
     c6e:	aa e3       	ldi	r26, 0x3A	; 58
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ea e3       	ldi	r30, 0x3A	; 58
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	48 2f       	mov	r20, r24
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 2e       	mov	r0, r18
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <DIO_enumSetPinDirection+0xb6>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <DIO_enumSetPinDirection+0xb2>
     c90:	80 95       	com	r24
     c92:	84 23       	and	r24, r20
     c94:	8c 93       	st	X, r24
     c96:	98 c0       	rjmp	.+304    	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
			}
			else {LOC_enumState = DIO_NOK ;}
     c98:	19 82       	std	Y+1, r1	; 0x01
     c9a:	96 c0       	rjmp	.+300    	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
			break;
		case DIO_PORTB :
			if(Copy_u8Direction == DIO_OUTPUT){SET_BIT(DDRB_REG,Copy_u8PinNumber);}
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	a1 f4       	brne	.+40     	; 0xcca <DIO_enumSetPinDirection+0xf4>
     ca2:	a7 e3       	ldi	r26, 0x37	; 55
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e7 e3       	ldi	r30, 0x37	; 55
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_enumSetPinDirection+0xea>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <DIO_enumSetPinDirection+0xe6>
     cc4:	84 2b       	or	r24, r20
     cc6:	8c 93       	st	X, r24
     cc8:	7f c0       	rjmp	.+254    	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
			else if(Copy_u8Direction == DIO_INPUT)
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
     ccc:	88 23       	and	r24, r24
     cce:	a9 f4       	brne	.+42     	; 0xcfa <DIO_enumSetPinDirection+0x124>
			{CLEAR_BIT(DDRB_REG,Copy_u8PinNumber);}
     cd0:	a7 e3       	ldi	r26, 0x37	; 55
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e7 e3       	ldi	r30, 0x37	; 55
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	48 2f       	mov	r20, r24
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 2e       	mov	r0, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_enumSetPinDirection+0x118>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_enumSetPinDirection+0x114>
     cf2:	80 95       	com	r24
     cf4:	84 23       	and	r24, r20
     cf6:	8c 93       	st	X, r24
     cf8:	67 c0       	rjmp	.+206    	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
			else {LOC_enumState = DIO_NOK ;}
     cfa:	19 82       	std	Y+1, r1	; 0x01
     cfc:	65 c0       	rjmp	.+202    	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
			break;
		case DIO_PORTC :
			if(Copy_u8Direction == DIO_OUTPUT){SET_BIT(DDRC_REG,Copy_u8PinNumber);}
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	a1 f4       	brne	.+40     	; 0xd2c <DIO_enumSetPinDirection+0x156>
     d04:	a4 e3       	ldi	r26, 0x34	; 52
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e4 e3       	ldi	r30, 0x34	; 52
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <DIO_enumSetPinDirection+0x14c>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <DIO_enumSetPinDirection+0x148>
     d26:	84 2b       	or	r24, r20
     d28:	8c 93       	st	X, r24
     d2a:	4e c0       	rjmp	.+156    	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
			else if(Copy_u8Direction == DIO_INPUT)
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	88 23       	and	r24, r24
     d30:	a9 f4       	brne	.+42     	; 0xd5c <DIO_enumSetPinDirection+0x186>
			{CLEAR_BIT(DDRC_REG,Copy_u8PinNumber);}
     d32:	a4 e3       	ldi	r26, 0x34	; 52
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e4 e3       	ldi	r30, 0x34	; 52
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_enumSetPinDirection+0x17a>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_enumSetPinDirection+0x176>
     d54:	80 95       	com	r24
     d56:	84 23       	and	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	36 c0       	rjmp	.+108    	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
			else {LOC_enumState = DIO_NOK ;}
     d5c:	19 82       	std	Y+1, r1	; 0x01
     d5e:	34 c0       	rjmp	.+104    	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
			break;
		case DIO_PORTD :
			if(Copy_u8Direction == DIO_OUTPUT){SET_BIT(DDRD_REG,Copy_u8PinNumber);}
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	a1 f4       	brne	.+40     	; 0xd8e <DIO_enumSetPinDirection+0x1b8>
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_enumSetPinDirection+0x1ae>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_enumSetPinDirection+0x1aa>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	1d c0       	rjmp	.+58     	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
			else if(Copy_u8Direction == DIO_INPUT)
     d8e:	8c 81       	ldd	r24, Y+4	; 0x04
     d90:	88 23       	and	r24, r24
     d92:	a9 f4       	brne	.+42     	; 0xdbe <DIO_enumSetPinDirection+0x1e8>
			{CLEAR_BIT(DDRD_REG,Copy_u8PinNumber);}
     d94:	a1 e3       	ldi	r26, 0x31	; 49
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e1 e3       	ldi	r30, 0x31	; 49
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	48 2f       	mov	r20, r24
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_enumSetPinDirection+0x1dc>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_enumSetPinDirection+0x1d8>
     db6:	80 95       	com	r24
     db8:	84 23       	and	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
			else {LOC_enumState = DIO_NOK ;}
     dbe:	19 82       	std	Y+1, r1	; 0x01
     dc0:	03 c0       	rjmp	.+6      	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
			break;
		default : LOC_enumState = DIO_NOK ; break;
     dc2:	19 82       	std	Y+1, r1	; 0x01
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <DIO_enumSetPinDirection+0x1f2>
		}
	}
	else{LOC_enumState = DIO_NOK ;}
     dc6:	19 82       	std	Y+1, r1	; 0x01
	return LOC_enumState;
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
}
     dca:	26 96       	adiw	r28, 0x06	; 6
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <DIO_enumSetPortValue>:
DIO_ErrorStatus DIO_enumSetPortValue (u8 Copy_u8Port , u8 Copy_u8Value)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	00 d0       	rcall	.+0      	; 0xde2 <DIO_enumSetPortValue+0x6>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <DIO_enumSetPortValue+0x8>
     de4:	0f 92       	push	r0
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	8a 83       	std	Y+2, r24	; 0x02
     dec:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port)
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	3d 83       	std	Y+5, r19	; 0x05
     dfa:	2c 83       	std	Y+4, r18	; 0x04
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	9d 81       	ldd	r25, Y+5	; 0x05
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	91 05       	cpc	r25, r1
     e04:	d1 f0       	breq	.+52     	; 0xe3a <DIO_enumSetPortValue+0x5e>
     e06:	2c 81       	ldd	r18, Y+4	; 0x04
     e08:	3d 81       	ldd	r19, Y+5	; 0x05
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	2c f4       	brge	.+10     	; 0xe1a <DIO_enumSetPortValue+0x3e>
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	9d 81       	ldd	r25, Y+5	; 0x05
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	61 f0       	breq	.+24     	; 0xe30 <DIO_enumSetPortValue+0x54>
     e18:	1f c0       	rjmp	.+62     	; 0xe58 <DIO_enumSetPortValue+0x7c>
     e1a:	2c 81       	ldd	r18, Y+4	; 0x04
     e1c:	3d 81       	ldd	r19, Y+5	; 0x05
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	81 f0       	breq	.+32     	; 0xe44 <DIO_enumSetPortValue+0x68>
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	9d 81       	ldd	r25, Y+5	; 0x05
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	91 05       	cpc	r25, r1
     e2c:	81 f0       	breq	.+32     	; 0xe4e <DIO_enumSetPortValue+0x72>
     e2e:	14 c0       	rjmp	.+40     	; 0xe58 <DIO_enumSetPortValue+0x7c>
	{
	case DIO_PORTA : PORTA_REG = Copy_u8Value; break;
     e30:	eb e3       	ldi	r30, 0x3B	; 59
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	80 83       	st	Z, r24
     e38:	10 c0       	rjmp	.+32     	; 0xe5a <DIO_enumSetPortValue+0x7e>
	case DIO_PORTB : PORTB_REG = Copy_u8Value; break;
     e3a:	e8 e3       	ldi	r30, 0x38	; 56
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	80 83       	st	Z, r24
     e42:	0b c0       	rjmp	.+22     	; 0xe5a <DIO_enumSetPortValue+0x7e>
	case DIO_PORTC : PORTC_REG = Copy_u8Value; break;
     e44:	e5 e3       	ldi	r30, 0x35	; 53
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	80 83       	st	Z, r24
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <DIO_enumSetPortValue+0x7e>
	case DIO_PORTD : PORTD_REG = Copy_u8Value; break;
     e4e:	e2 e3       	ldi	r30, 0x32	; 50
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	80 83       	st	Z, r24
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <DIO_enumSetPortValue+0x7e>
	default : LOC_enumState = DIO_NOK ; break;
     e58:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <DIO_enumGetPortValue>:
DIO_ErrorStatus DIO_enumGetPortValue (u8 Copy_u8Port , u8 *Copy_Data)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	00 d0       	rcall	.+0      	; 0xe72 <DIO_enumGetPortValue+0x6>
     e72:	00 d0       	rcall	.+0      	; 0xe74 <DIO_enumGetPortValue+0x8>
     e74:	00 d0       	rcall	.+0      	; 0xe76 <DIO_enumGetPortValue+0xa>
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	8a 83       	std	Y+2, r24	; 0x02
     e7c:	7c 83       	std	Y+4, r23	; 0x04
     e7e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port)
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	3e 83       	std	Y+6, r19	; 0x06
     e8c:	2d 83       	std	Y+5, r18	; 0x05
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	9e 81       	ldd	r25, Y+6	; 0x06
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	91 05       	cpc	r25, r1
     e96:	e1 f0       	breq	.+56     	; 0xed0 <DIO_enumGetPortValue+0x64>
     e98:	2d 81       	ldd	r18, Y+5	; 0x05
     e9a:	3e 81       	ldd	r19, Y+6	; 0x06
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	31 05       	cpc	r19, r1
     ea0:	2c f4       	brge	.+10     	; 0xeac <DIO_enumGetPortValue+0x40>
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	61 f0       	breq	.+24     	; 0xec2 <DIO_enumGetPortValue+0x56>
     eaa:	27 c0       	rjmp	.+78     	; 0xefa <DIO_enumGetPortValue+0x8e>
     eac:	2d 81       	ldd	r18, Y+5	; 0x05
     eae:	3e 81       	ldd	r19, Y+6	; 0x06
     eb0:	22 30       	cpi	r18, 0x02	; 2
     eb2:	31 05       	cpc	r19, r1
     eb4:	a1 f0       	breq	.+40     	; 0xede <DIO_enumGetPortValue+0x72>
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	91 05       	cpc	r25, r1
     ebe:	b1 f0       	breq	.+44     	; 0xeec <DIO_enumGetPortValue+0x80>
     ec0:	1c c0       	rjmp	.+56     	; 0xefa <DIO_enumGetPortValue+0x8e>
	{
	case DIO_PORTA : *Copy_Data = PINA_REG; break;
     ec2:	e9 e3       	ldi	r30, 0x39	; 57
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	eb 81       	ldd	r30, Y+3	; 0x03
     eca:	fc 81       	ldd	r31, Y+4	; 0x04
     ecc:	80 83       	st	Z, r24
     ece:	16 c0       	rjmp	.+44     	; 0xefc <DIO_enumGetPortValue+0x90>
	case DIO_PORTB : *Copy_Data = PINB_REG; break;
     ed0:	e6 e3       	ldi	r30, 0x36	; 54
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	eb 81       	ldd	r30, Y+3	; 0x03
     ed8:	fc 81       	ldd	r31, Y+4	; 0x04
     eda:	80 83       	st	Z, r24
     edc:	0f c0       	rjmp	.+30     	; 0xefc <DIO_enumGetPortValue+0x90>
	case DIO_PORTC : *Copy_Data = PINC_REG; break;
     ede:	e3 e3       	ldi	r30, 0x33	; 51
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	eb 81       	ldd	r30, Y+3	; 0x03
     ee6:	fc 81       	ldd	r31, Y+4	; 0x04
     ee8:	80 83       	st	Z, r24
     eea:	08 c0       	rjmp	.+16     	; 0xefc <DIO_enumGetPortValue+0x90>
	case DIO_PORTD : *Copy_Data = PIND_REG; break;
     eec:	e0 e3       	ldi	r30, 0x30	; 48
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	eb 81       	ldd	r30, Y+3	; 0x03
     ef4:	fc 81       	ldd	r31, Y+4	; 0x04
     ef6:	80 83       	st	Z, r24
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <DIO_enumGetPortValue+0x90>
	default : LOC_enumState = DIO_NOK ; break;
     efa:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
}
     efe:	26 96       	adiw	r28, 0x06	; 6
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <DIO_enumSetPinValue>:


DIO_ErrorStatus DIO_enumSetPinValue (u8 Copy_u8Port , u8 Copy_u8PinNumber , u8 Copy_u8Value)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	00 d0       	rcall	.+0      	; 0xf16 <DIO_enumSetPinValue+0x6>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <DIO_enumSetPinValue+0x8>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <DIO_enumSetPinValue+0xa>
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	8a 83       	std	Y+2, r24	; 0x02
     f20:	6b 83       	std	Y+3, r22	; 0x03
     f22:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinNumber >= DIO_PIN0 && Copy_u8PinNumber <= DIO_PIN7)
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	88 30       	cpi	r24, 0x08	; 8
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <DIO_enumSetPinValue+0x20>
     f2e:	e8 c0       	rjmp	.+464    	; 0x1100 <DIO_enumSetPinValue+0x1f0>
	{
		switch(Copy_u8Port)
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3e 83       	std	Y+6, r19	; 0x06
     f38:	2d 83       	std	Y+5, r18	; 0x05
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <DIO_enumSetPinValue+0x36>
     f44:	48 c0       	rjmp	.+144    	; 0xfd6 <DIO_enumSetPinValue+0xc6>
     f46:	2d 81       	ldd	r18, Y+5	; 0x05
     f48:	3e 81       	ldd	r19, Y+6	; 0x06
     f4a:	22 30       	cpi	r18, 0x02	; 2
     f4c:	31 05       	cpc	r19, r1
     f4e:	2c f4       	brge	.+10     	; 0xf5a <DIO_enumSetPinValue+0x4a>
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	71 f0       	breq	.+28     	; 0xf74 <DIO_enumSetPinValue+0x64>
     f58:	d1 c0       	rjmp	.+418    	; 0x10fc <DIO_enumSetPinValue+0x1ec>
     f5a:	2d 81       	ldd	r18, Y+5	; 0x05
     f5c:	3e 81       	ldd	r19, Y+6	; 0x06
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	09 f4       	brne	.+2      	; 0xf66 <DIO_enumSetPinValue+0x56>
     f64:	69 c0       	rjmp	.+210    	; 0x1038 <DIO_enumSetPinValue+0x128>
     f66:	8d 81       	ldd	r24, Y+5	; 0x05
     f68:	9e 81       	ldd	r25, Y+6	; 0x06
     f6a:	83 30       	cpi	r24, 0x03	; 3
     f6c:	91 05       	cpc	r25, r1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <DIO_enumSetPinValue+0x62>
     f70:	94 c0       	rjmp	.+296    	; 0x109a <DIO_enumSetPinValue+0x18a>
     f72:	c4 c0       	rjmp	.+392    	; 0x10fc <DIO_enumSetPinValue+0x1ec>
		{
		case DIO_PORTA :
			if(Copy_u8Value == DIO_HIGH){SET_BIT(PORTA_REG,Copy_u8PinNumber);}
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	a1 f4       	brne	.+40     	; 0xfa2 <DIO_enumSetPinValue+0x92>
     f7a:	ab e3       	ldi	r26, 0x3B	; 59
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	eb e3       	ldi	r30, 0x3B	; 59
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_enumSetPinValue+0x88>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_enumSetPinValue+0x84>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	b0 c0       	rjmp	.+352    	; 0x1102 <DIO_enumSetPinValue+0x1f2>
			else if(Copy_u8Value == DIO_LOW){CLEAR_BIT(PORTA_REG,Copy_u8PinNumber);}
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	88 23       	and	r24, r24
     fa6:	a9 f4       	brne	.+42     	; 0xfd2 <DIO_enumSetPinValue+0xc2>
     fa8:	ab e3       	ldi	r26, 0x3B	; 59
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	eb e3       	ldi	r30, 0x3B	; 59
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_enumSetPinValue+0xb6>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_enumSetPinValue+0xb2>
     fca:	80 95       	com	r24
     fcc:	84 23       	and	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	98 c0       	rjmp	.+304    	; 0x1102 <DIO_enumSetPinValue+0x1f2>
			else {LOC_enumState = DIO_NOK ;}
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	96 c0       	rjmp	.+300    	; 0x1102 <DIO_enumSetPinValue+0x1f2>
			break;
		case DIO_PORTB :
			if(Copy_u8Value == DIO_HIGH){SET_BIT(PORTB_REG,Copy_u8PinNumber);}
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	a1 f4       	brne	.+40     	; 0x1004 <DIO_enumSetPinValue+0xf4>
     fdc:	a8 e3       	ldi	r26, 0x38	; 56
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e8 e3       	ldi	r30, 0x38	; 56
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_enumSetPinValue+0xea>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_enumSetPinValue+0xe6>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	7f c0       	rjmp	.+254    	; 0x1102 <DIO_enumSetPinValue+0x1f2>
			else if(Copy_u8Value == DIO_LOW){CLEAR_BIT(PORTB_REG,Copy_u8PinNumber);}
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	88 23       	and	r24, r24
    1008:	a9 f4       	brne	.+42     	; 0x1034 <DIO_enumSetPinValue+0x124>
    100a:	a8 e3       	ldi	r26, 0x38	; 56
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e8 e3       	ldi	r30, 0x38	; 56
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_enumSetPinValue+0x118>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_enumSetPinValue+0x114>
    102c:	80 95       	com	r24
    102e:	84 23       	and	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	67 c0       	rjmp	.+206    	; 0x1102 <DIO_enumSetPinValue+0x1f2>
			else {LOC_enumState = DIO_NOK ;}
    1034:	19 82       	std	Y+1, r1	; 0x01
    1036:	65 c0       	rjmp	.+202    	; 0x1102 <DIO_enumSetPinValue+0x1f2>
			break;
		case DIO_PORTC :
			if(Copy_u8Value == DIO_HIGH){SET_BIT(PORTC_REG,Copy_u8PinNumber);}
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	a1 f4       	brne	.+40     	; 0x1066 <DIO_enumSetPinValue+0x156>
    103e:	a5 e3       	ldi	r26, 0x35	; 53
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e3       	ldi	r30, 0x35	; 53
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_enumSetPinValue+0x14c>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_enumSetPinValue+0x148>
    1060:	84 2b       	or	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	4e c0       	rjmp	.+156    	; 0x1102 <DIO_enumSetPinValue+0x1f2>
			else if(Copy_u8Value == DIO_LOW){CLEAR_BIT(PORTC_REG,Copy_u8PinNumber);}
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	88 23       	and	r24, r24
    106a:	a9 f4       	brne	.+42     	; 0x1096 <DIO_enumSetPinValue+0x186>
    106c:	a5 e3       	ldi	r26, 0x35	; 53
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e5 e3       	ldi	r30, 0x35	; 53
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_enumSetPinValue+0x17a>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_enumSetPinValue+0x176>
    108e:	80 95       	com	r24
    1090:	84 23       	and	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	36 c0       	rjmp	.+108    	; 0x1102 <DIO_enumSetPinValue+0x1f2>
			else {LOC_enumState = DIO_NOK ;}
    1096:	19 82       	std	Y+1, r1	; 0x01
    1098:	34 c0       	rjmp	.+104    	; 0x1102 <DIO_enumSetPinValue+0x1f2>
			break;
		case DIO_PORTD :
			if(Copy_u8Value == DIO_HIGH){SET_BIT(PORTD_REG,Copy_u8PinNumber);}
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	a1 f4       	brne	.+40     	; 0x10c8 <DIO_enumSetPinValue+0x1b8>
    10a0:	a2 e3       	ldi	r26, 0x32	; 50
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e2 e3       	ldi	r30, 0x32	; 50
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_enumSetPinValue+0x1ae>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_enumSetPinValue+0x1aa>
    10c2:	84 2b       	or	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	1d c0       	rjmp	.+58     	; 0x1102 <DIO_enumSetPinValue+0x1f2>
			else if(Copy_u8Value == DIO_LOW){CLEAR_BIT(PORTD_REG,Copy_u8PinNumber);}
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	88 23       	and	r24, r24
    10cc:	a9 f4       	brne	.+42     	; 0x10f8 <DIO_enumSetPinValue+0x1e8>
    10ce:	a2 e3       	ldi	r26, 0x32	; 50
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e2 e3       	ldi	r30, 0x32	; 50
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_enumSetPinValue+0x1dc>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_enumSetPinValue+0x1d8>
    10f0:	80 95       	com	r24
    10f2:	84 23       	and	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	05 c0       	rjmp	.+10     	; 0x1102 <DIO_enumSetPinValue+0x1f2>
			else {LOC_enumState = DIO_NOK ;}
    10f8:	19 82       	std	Y+1, r1	; 0x01
    10fa:	03 c0       	rjmp	.+6      	; 0x1102 <DIO_enumSetPinValue+0x1f2>
			break;
		default : LOC_enumState = DIO_NOK ; break;
    10fc:	19 82       	std	Y+1, r1	; 0x01
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <DIO_enumSetPinValue+0x1f2>
		}
	}
	else{LOC_enumState = DIO_NOK ;}
    1100:	19 82       	std	Y+1, r1	; 0x01
	return LOC_enumState;
    1102:	89 81       	ldd	r24, Y+1	; 0x01
}
    1104:	26 96       	adiw	r28, 0x06	; 6
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <DIO_enumGetPinValue>:
DIO_ErrorStatus DIO_enumGetPinValue (u8 Copy_u8Port , u8 Copy_u8PinNumber , u8 * Copy_ptrData)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	27 97       	sbiw	r28, 0x07	; 7
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	8a 83       	std	Y+2, r24	; 0x02
    112c:	6b 83       	std	Y+3, r22	; 0x03
    112e:	5d 83       	std	Y+5, r21	; 0x05
    1130:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinNumber >= DIO_PIN0 && Copy_u8PinNumber <= DIO_PIN7)
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	08 f0       	brcs	.+2      	; 0x113e <DIO_enumGetPinValue+0x28>
    113c:	73 c0       	rjmp	.+230    	; 0x1224 <DIO_enumGetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3f 83       	std	Y+7, r19	; 0x07
    1146:	2e 83       	std	Y+6, r18	; 0x06
    1148:	4e 81       	ldd	r20, Y+6	; 0x06
    114a:	5f 81       	ldd	r21, Y+7	; 0x07
    114c:	41 30       	cpi	r20, 0x01	; 1
    114e:	51 05       	cpc	r21, r1
    1150:	59 f1       	breq	.+86     	; 0x11a8 <DIO_enumGetPinValue+0x92>
    1152:	8e 81       	ldd	r24, Y+6	; 0x06
    1154:	9f 81       	ldd	r25, Y+7	; 0x07
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	91 05       	cpc	r25, r1
    115a:	34 f4       	brge	.+12     	; 0x1168 <DIO_enumGetPinValue+0x52>
    115c:	2e 81       	ldd	r18, Y+6	; 0x06
    115e:	3f 81       	ldd	r19, Y+7	; 0x07
    1160:	21 15       	cp	r18, r1
    1162:	31 05       	cpc	r19, r1
    1164:	69 f0       	breq	.+26     	; 0x1180 <DIO_enumGetPinValue+0x6a>
    1166:	5c c0       	rjmp	.+184    	; 0x1220 <DIO_enumGetPinValue+0x10a>
    1168:	4e 81       	ldd	r20, Y+6	; 0x06
    116a:	5f 81       	ldd	r21, Y+7	; 0x07
    116c:	42 30       	cpi	r20, 0x02	; 2
    116e:	51 05       	cpc	r21, r1
    1170:	79 f1       	breq	.+94     	; 0x11d0 <DIO_enumGetPinValue+0xba>
    1172:	8e 81       	ldd	r24, Y+6	; 0x06
    1174:	9f 81       	ldd	r25, Y+7	; 0x07
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <DIO_enumGetPinValue+0x68>
    117c:	3d c0       	rjmp	.+122    	; 0x11f8 <DIO_enumGetPinValue+0xe2>
    117e:	50 c0       	rjmp	.+160    	; 0x1220 <DIO_enumGetPinValue+0x10a>
		{
		case DIO_PORTA : *Copy_ptrData = GET_BIT(PINA_REG,Copy_u8PinNumber);
    1180:	e9 e3       	ldi	r30, 0x39	; 57
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a9 01       	movw	r20, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_enumGetPinValue+0x82>
    1194:	55 95       	asr	r21
    1196:	47 95       	ror	r20
    1198:	8a 95       	dec	r24
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_enumGetPinValue+0x7e>
    119c:	ca 01       	movw	r24, r20
    119e:	81 70       	andi	r24, 0x01	; 1
    11a0:	ec 81       	ldd	r30, Y+4	; 0x04
    11a2:	fd 81       	ldd	r31, Y+5	; 0x05
    11a4:	80 83       	st	Z, r24
    11a6:	3f c0       	rjmp	.+126    	; 0x1226 <DIO_enumGetPinValue+0x110>
		break;
		case DIO_PORTB : *Copy_ptrData = GET_BIT(PINB_REG,Copy_u8PinNumber);
    11a8:	e6 e3       	ldi	r30, 0x36	; 54
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a9 01       	movw	r20, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_enumGetPinValue+0xaa>
    11bc:	55 95       	asr	r21
    11be:	47 95       	ror	r20
    11c0:	8a 95       	dec	r24
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_enumGetPinValue+0xa6>
    11c4:	ca 01       	movw	r24, r20
    11c6:	81 70       	andi	r24, 0x01	; 1
    11c8:	ec 81       	ldd	r30, Y+4	; 0x04
    11ca:	fd 81       	ldd	r31, Y+5	; 0x05
    11cc:	80 83       	st	Z, r24
    11ce:	2b c0       	rjmp	.+86     	; 0x1226 <DIO_enumGetPinValue+0x110>
		break;
		case DIO_PORTC : *Copy_ptrData = GET_BIT(PINC_REG,Copy_u8PinNumber);
    11d0:	e3 e3       	ldi	r30, 0x33	; 51
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a9 01       	movw	r20, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_enumGetPinValue+0xd2>
    11e4:	55 95       	asr	r21
    11e6:	47 95       	ror	r20
    11e8:	8a 95       	dec	r24
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_enumGetPinValue+0xce>
    11ec:	ca 01       	movw	r24, r20
    11ee:	81 70       	andi	r24, 0x01	; 1
    11f0:	ec 81       	ldd	r30, Y+4	; 0x04
    11f2:	fd 81       	ldd	r31, Y+5	; 0x05
    11f4:	80 83       	st	Z, r24
    11f6:	17 c0       	rjmp	.+46     	; 0x1226 <DIO_enumGetPinValue+0x110>
		break;
		case DIO_PORTD : *Copy_ptrData = GET_BIT(PIND_REG,Copy_u8PinNumber);
    11f8:	e0 e3       	ldi	r30, 0x30	; 48
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_enumGetPinValue+0xfa>
    120c:	55 95       	asr	r21
    120e:	47 95       	ror	r20
    1210:	8a 95       	dec	r24
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_enumGetPinValue+0xf6>
    1214:	ca 01       	movw	r24, r20
    1216:	81 70       	andi	r24, 0x01	; 1
    1218:	ec 81       	ldd	r30, Y+4	; 0x04
    121a:	fd 81       	ldd	r31, Y+5	; 0x05
    121c:	80 83       	st	Z, r24
    121e:	03 c0       	rjmp	.+6      	; 0x1226 <DIO_enumGetPinValue+0x110>
		break;
		default : LOC_enumState = DIO_NOK ;
    1220:	19 82       	std	Y+1, r1	; 0x01
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <DIO_enumGetPinValue+0x110>
		break;
		}
	}
	else{LOC_enumState = DIO_NOK ;}
    1224:	19 82       	std	Y+1, r1	; 0x01
	return LOC_enumState;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
}
    1228:	27 96       	adiw	r28, 0x07	; 7
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <DIO_enumTogglePortValue>:
DIO_ErrorStatus DIO_enumTogglePortValue (u8 Copy_u8Port){
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <DIO_enumTogglePortValue+0x6>
    1240:	0f 92       	push	r0
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	8b 83       	std	Y+3, r24	; 0x03
	DIO_ErrorStatus Loc_enumState = DIO_OK;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8Value;
	Loc_enumState=DIO_enumGetPortValue(Copy_u8Port,&Loc_u8Value);
    124c:	9e 01       	movw	r18, r28
    124e:	2e 5f       	subi	r18, 0xFE	; 254
    1250:	3f 4f       	sbci	r19, 0xFF	; 255
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	b9 01       	movw	r22, r18
    1256:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_enumGetPortValue>
    125a:	89 83       	std	Y+1, r24	; 0x01
	Loc_enumState=DIO_enumSetPortValue(Copy_u8Port,~Loc_u8Value);
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	98 2f       	mov	r25, r24
    1260:	90 95       	com	r25
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	69 2f       	mov	r22, r25
    1266:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_enumSetPortValue>
    126a:	89 83       	std	Y+1, r24	; 0x01
	return Loc_enumState;
    126c:	89 81       	ldd	r24, Y+1	; 0x01
}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <DIO_enumTogglePinValue>:
DIO_ErrorStatus DIO_enumTogglePinValue (u8 Copy_u8Port,u8 Copy_u8PinNumber){
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <DIO_enumTogglePinValue+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <DIO_enumTogglePinValue+0x8>
    1282:	0f 92       	push	r0
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	8b 83       	std	Y+3, r24	; 0x03
    128a:	6c 83       	std	Y+4, r22	; 0x04
	DIO_ErrorStatus Loc_enumState = DIO_OK;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8Value;
	Loc_enumState=DIO_enumGetPinValue(Copy_u8Port,Copy_u8PinNumber,&Loc_u8Value);
    1290:	9e 01       	movw	r18, r28
    1292:	2e 5f       	subi	r18, 0xFE	; 254
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	6c 81       	ldd	r22, Y+4	; 0x04
    129a:	a9 01       	movw	r20, r18
    129c:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_enumGetPinValue>
    12a0:	89 83       	std	Y+1, r24	; 0x01
	Loc_enumState=DIO_enumSetPinValue(Copy_u8Port,Copy_u8PinNumber,!Loc_u8Value);
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	1d 82       	std	Y+5, r1	; 0x05
    12a6:	88 23       	and	r24, r24
    12a8:	11 f4       	brne	.+4      	; 0x12ae <DIO_enumTogglePinValue+0x34>
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	6c 81       	ldd	r22, Y+4	; 0x04
    12b2:	4d 81       	ldd	r20, Y+5	; 0x05
    12b4:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>
    12b8:	89 83       	std	Y+1, r24	; 0x01
	return Loc_enumState;
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <KPD_INIT>:
#include "KEYPAD_INTERFACE.h"
#include "KEYPAD_PRIVATE.h"
#include <util/delay.h>

void KPD_INIT()
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	/* Initialize first 4 bits in keypad as output pins */
	DIO_enumSetPinDirection(keypad_port,keypad_col0_pin,DIO_OUTPUT);
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	41 e0       	ldi	r20, 0x01	; 1
    12da:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(keypad_port,keypad_col1_pin,DIO_OUTPUT);
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(keypad_port,keypad_col2_pin,DIO_OUTPUT);
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	62 e0       	ldi	r22, 0x02	; 2
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(keypad_port,keypad_col3_pin,DIO_OUTPUT);
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	63 e0       	ldi	r22, 0x03	; 3
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_enumSetPinDirection>
	/* initalize second four bits in keypad as input pins */
	DIO_enumSetPinDirection(keypad_port,keypad_row0_pin,DIO_INPUT);
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	64 e0       	ldi	r22, 0x04	; 4
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(keypad_port,keypad_row1_pin,DIO_INPUT);
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	65 e0       	ldi	r22, 0x05	; 5
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(keypad_port,keypad_row2_pin,DIO_INPUT);
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	66 e0       	ldi	r22, 0x06	; 6
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(keypad_port,keypad_row3_pin,DIO_INPUT);
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	67 e0       	ldi	r22, 0x07	; 7
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_enumSetPinDirection>
	/*connect pull up resistance to the input pins*/

	DIO_enumSetPortValue(keypad_port,0xff);
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	6f ef       	ldi	r22, 0xFF	; 255
    1328:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_enumSetPortValue>
}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <KPD_u8GetPressedKey>:
u8 KPD_u8GetPressedKey()
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	62 97       	sbiw	r28, 0x12	; 18
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
	u8 onpress=0xff;
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	89 8b       	std	Y+17, r24	; 0x11
			{'1','2','3','-'},
			{'c','0','=','+'}};
	//	static u8 Local_u8KPDArr[rownum][colnum]={{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16} };
	static u8 Local_u8colarray[colnum]={keypad_col0_pin,keypad_col1_pin,keypad_col2_pin,keypad_col3_pin};
	static u8 Local_u8rowarray[rownum]={keypad_row0_pin,keypad_row1_pin,keypad_row2_pin,keypad_row3_pin};
	for(u8 Local_u8CoulmnIndex=0;Local_u8CoulmnIndex<colnum;Local_u8CoulmnIndex++)
    134a:	18 8a       	std	Y+16, r1	; 0x10
    134c:	e1 c0       	rjmp	.+450    	; 0x1510 <KPD_u8GetPressedKey+0x1de>
	{
		DIO_enumSetPinValue(keypad_port,Local_u8colarray[Local_u8CoulmnIndex],DIO_LOW);
    134e:	88 89       	ldd	r24, Y+16	; 0x10
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	fc 01       	movw	r30, r24
    1356:	e4 59       	subi	r30, 0x94	; 148
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	90 81       	ld	r25, Z
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	69 2f       	mov	r22, r25
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>
		for(u8 Local_u8RowIndex=0;Local_u8RowIndex<rownum;Local_u8RowIndex++)
    1366:	1f 86       	std	Y+15, r1	; 0x0f
    1368:	c0 c0       	rjmp	.+384    	; 0x14ea <KPD_u8GetPressedKey+0x1b8>
		{
			DIO_enumGetPinValue(keypad_port,Local_u8rowarray[Local_u8RowIndex],&Local_u8state);
    136a:	8f 85       	ldd	r24, Y+15	; 0x0f
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	fc 01       	movw	r30, r24
    1372:	e8 59       	subi	r30, 0x98	; 152
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	90 81       	ld	r25, Z
    1378:	9e 01       	movw	r18, r28
    137a:	2e 5e       	subi	r18, 0xEE	; 238
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	69 2f       	mov	r22, r25
    1382:	a9 01       	movw	r20, r18
    1384:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_enumGetPinValue>


			if(Local_u8state==DIO_LOW){
    1388:	8a 89       	ldd	r24, Y+18	; 0x12
    138a:	88 23       	and	r24, r24
    138c:	09 f0       	breq	.+2      	; 0x1390 <KPD_u8GetPressedKey+0x5e>
    138e:	aa c0       	rjmp	.+340    	; 0x14e4 <KPD_u8GetPressedKey+0x1b2>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a8 e4       	ldi	r26, 0x48	; 72
    1396:	b2 e4       	ldi	r27, 0x42	; 66
    1398:	8b 87       	std	Y+11, r24	; 0x0b
    139a:	9c 87       	std	Y+12, r25	; 0x0c
    139c:	ad 87       	std	Y+13, r26	; 0x0d
    139e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	4a e7       	ldi	r20, 0x7A	; 122
    13ae:	53 e4       	ldi	r21, 0x43	; 67
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	8f 83       	std	Y+7, r24	; 0x07
    13ba:	98 87       	std	Y+8, r25	; 0x08
    13bc:	a9 87       	std	Y+9, r26	; 0x09
    13be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c0:	6f 81       	ldd	r22, Y+7	; 0x07
    13c2:	78 85       	ldd	r23, Y+8	; 0x08
    13c4:	89 85       	ldd	r24, Y+9	; 0x09
    13c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <KPD_u8GetPressedKey+0xb0>
		__ticks = 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9e 83       	std	Y+6, r25	; 0x06
    13de:	8d 83       	std	Y+5, r24	; 0x05
    13e0:	3f c0       	rjmp	.+126    	; 0x1460 <KPD_u8GetPressedKey+0x12e>
	else if (__tmp > 65535)
    13e2:	6f 81       	ldd	r22, Y+7	; 0x07
    13e4:	78 85       	ldd	r23, Y+8	; 0x08
    13e6:	89 85       	ldd	r24, Y+9	; 0x09
    13e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	3f ef       	ldi	r19, 0xFF	; 255
    13ee:	4f e7       	ldi	r20, 0x7F	; 127
    13f0:	57 e4       	ldi	r21, 0x47	; 71
    13f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	4c f5       	brge	.+82     	; 0x144c <KPD_u8GetPressedKey+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    13fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    13fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1400:	9e 85       	ldd	r25, Y+14	; 0x0e
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e2       	ldi	r20, 0x20	; 32
    1408:	51 e4       	ldi	r21, 0x41	; 65
    140a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9e 83       	std	Y+6, r25	; 0x06
    1420:	8d 83       	std	Y+5, r24	; 0x05
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <KPD_u8GetPressedKey+0x110>
    1424:	89 e1       	ldi	r24, 0x19	; 25
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	9c 83       	std	Y+4, r25	; 0x04
    142a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <KPD_u8GetPressedKey+0xfe>
    1434:	9c 83       	std	Y+4, r25	; 0x04
    1436:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	9e 81       	ldd	r25, Y+6	; 0x06
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	69 f7       	brne	.-38     	; 0x1424 <KPD_u8GetPressedKey+0xf2>
    144a:	14 c0       	rjmp	.+40     	; 0x1474 <KPD_u8GetPressedKey+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144c:	6f 81       	ldd	r22, Y+7	; 0x07
    144e:	78 85       	ldd	r23, Y+8	; 0x08
    1450:	89 85       	ldd	r24, Y+9	; 0x09
    1452:	9a 85       	ldd	r25, Y+10	; 0x0a
    1454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	9e 81       	ldd	r25, Y+6	; 0x06
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <KPD_u8GetPressedKey+0x13a>
    1470:	9a 83       	std	Y+2, r25	; 0x02
    1472:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				DIO_enumGetPinValue(keypad_port,Local_u8rowarray[Local_u8RowIndex],&Local_u8state);
    1474:	8f 85       	ldd	r24, Y+15	; 0x0f
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	fc 01       	movw	r30, r24
    147c:	e8 59       	subi	r30, 0x98	; 152
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	90 81       	ld	r25, Z
    1482:	9e 01       	movw	r18, r28
    1484:	2e 5e       	subi	r18, 0xEE	; 238
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	69 2f       	mov	r22, r25
    148c:	a9 01       	movw	r20, r18
    148e:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_enumGetPinValue>

				if(Local_u8state==DIO_LOW){
    1492:	8a 89       	ldd	r24, Y+18	; 0x12
    1494:	88 23       	and	r24, r24
    1496:	11 f5       	brne	.+68     	; 0x14dc <KPD_u8GetPressedKey+0x1aa>




					onpress=Local_u8KPDArr[Local_u8RowIndex][Local_u8CoulmnIndex];}//put the selected pressed key to the return value
    1498:	8f 85       	ldd	r24, Y+15	; 0x0f
    149a:	48 2f       	mov	r20, r24
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	88 89       	ldd	r24, Y+16	; 0x10
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	ca 01       	movw	r24, r20
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	fc 01       	movw	r30, r24
    14b4:	e0 59       	subi	r30, 0x90	; 144
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	80 81       	ld	r24, Z
    14ba:	89 8b       	std	Y+17, r24	; 0x11
    14bc:	0f c0       	rjmp	.+30     	; 0x14dc <KPD_u8GetPressedKey+0x1aa>
				while(Local_u8state==DIO_LOW)
				{
					DIO_enumGetPinValue(keypad_port,Local_u8rowarray[Local_u8RowIndex],&Local_u8state);
    14be:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	fc 01       	movw	r30, r24
    14c6:	e8 59       	subi	r30, 0x98	; 152
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	90 81       	ld	r25, Z
    14cc:	9e 01       	movw	r18, r28
    14ce:	2e 5e       	subi	r18, 0xEE	; 238
    14d0:	3f 4f       	sbci	r19, 0xFF	; 255
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	69 2f       	mov	r22, r25
    14d6:	a9 01       	movw	r20, r18
    14d8:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_enumGetPinValue>




					onpress=Local_u8KPDArr[Local_u8RowIndex][Local_u8CoulmnIndex];}//put the selected pressed key to the return value
				while(Local_u8state==DIO_LOW)
    14dc:	8a 89       	ldd	r24, Y+18	; 0x12
    14de:	88 23       	and	r24, r24
    14e0:	71 f3       	breq	.-36     	; 0x14be <KPD_u8GetPressedKey+0x18c>
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <KPD_u8GetPressedKey+0x1c0>
	static u8 Local_u8colarray[colnum]={keypad_col0_pin,keypad_col1_pin,keypad_col2_pin,keypad_col3_pin};
	static u8 Local_u8rowarray[rownum]={keypad_row0_pin,keypad_row1_pin,keypad_row2_pin,keypad_row3_pin};
	for(u8 Local_u8CoulmnIndex=0;Local_u8CoulmnIndex<colnum;Local_u8CoulmnIndex++)
	{
		DIO_enumSetPinValue(keypad_port,Local_u8colarray[Local_u8CoulmnIndex],DIO_LOW);
		for(u8 Local_u8RowIndex=0;Local_u8RowIndex<rownum;Local_u8RowIndex++)
    14e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	8f 87       	std	Y+15, r24	; 0x0f
    14ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ec:	84 30       	cpi	r24, 0x04	; 4
    14ee:	08 f4       	brcc	.+2      	; 0x14f2 <KPD_u8GetPressedKey+0x1c0>
    14f0:	3c cf       	rjmp	.-392    	; 0x136a <KPD_u8GetPressedKey+0x38>
				break;


			}}

		DIO_enumSetPinValue(keypad_port,Local_u8colarray[Local_u8CoulmnIndex],DIO_HIGH);
    14f2:	88 89       	ldd	r24, Y+16	; 0x10
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	fc 01       	movw	r30, r24
    14fa:	e4 59       	subi	r30, 0x94	; 148
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	90 81       	ld	r25, Z
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	69 2f       	mov	r22, r25
    1504:	41 e0       	ldi	r20, 0x01	; 1
    1506:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>
			{'1','2','3','-'},
			{'c','0','=','+'}};
	//	static u8 Local_u8KPDArr[rownum][colnum]={{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16} };
	static u8 Local_u8colarray[colnum]={keypad_col0_pin,keypad_col1_pin,keypad_col2_pin,keypad_col3_pin};
	static u8 Local_u8rowarray[rownum]={keypad_row0_pin,keypad_row1_pin,keypad_row2_pin,keypad_row3_pin};
	for(u8 Local_u8CoulmnIndex=0;Local_u8CoulmnIndex<colnum;Local_u8CoulmnIndex++)
    150a:	88 89       	ldd	r24, Y+16	; 0x10
    150c:	8f 5f       	subi	r24, 0xFF	; 255
    150e:	88 8b       	std	Y+16, r24	; 0x10
    1510:	88 89       	ldd	r24, Y+16	; 0x10
    1512:	84 30       	cpi	r24, 0x04	; 4
    1514:	08 f4       	brcc	.+2      	; 0x1518 <KPD_u8GetPressedKey+0x1e6>
    1516:	1b cf       	rjmp	.-458    	; 0x134e <KPD_u8GetPressedKey+0x1c>

			}}

		DIO_enumSetPinValue(keypad_port,Local_u8colarray[Local_u8CoulmnIndex],DIO_HIGH);
	}
	return onpress;//return the pressed key in case of key pressed or return 0xff in case of no key pressed
    1518:	89 89       	ldd	r24, Y+17	; 0x11

}
    151a:	62 96       	adiw	r28, 0x12	; 18
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <LCD_voidSendCommand>:
#include "LCD_CONFG.h"
#include "LCD_INTERFACE.h"
#include "LCD_PRIVATE.h"

void LCD_voidSendCommand(u8 copy_u8Command)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	89 83       	std	Y+1, r24	; 0x01
/*  DIRCTION OF LCD   */
DIO_enumSetPortDirection(LCD_DATA_PORT,DIO_OUTPUT);
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	61 e0       	ldi	r22, 0x01	; 1
    153c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enumSetPortDirection>
/*   DIRCTION OF RS/RW/E   */
DIO_enumSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	41 e0       	ldi	r20, 0x01	; 1
    1546:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_enumSetPinDirection>
DIO_enumSetPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    154a:	83 e0       	ldi	r24, 0x03	; 3
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	41 e0       	ldi	r20, 0x01	; 1
    1550:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_enumSetPinDirection>
DIO_enumSetPinDirection(LCD_CONTROL_PORT,LCD_E_PIN,DIO_OUTPUT);
    1554:	83 e0       	ldi	r24, 0x03	; 3
    1556:	62 e0       	ldi	r22, 0x02	; 2
    1558:	41 e0       	ldi	r20, 0x01	; 1
    155a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_enumSetPinDirection>

/*Setting RS pin to low*/
DIO_enumSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    155e:	83 e0       	ldi	r24, 0x03	; 3
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>
/*Setting RW pin low for write*/
DIO_enumSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    1568:	83 e0       	ldi	r24, 0x03	; 3
    156a:	61 e0       	ldi	r22, 0x01	; 1
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>
/*Set command data pins*/
DIO_enumSetPortValue(LCD_DATA_PORT,copy_u8Command);
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	69 81       	ldd	r22, Y+1	; 0x01
    1576:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_enumSetPortValue>
/*Send Enable pulse*/
DIO_enumSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    157a:	83 e0       	ldi	r24, 0x03	; 3
    157c:	62 e0       	ldi	r22, 0x02	; 2
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>

DIO_enumSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1584:	83 e0       	ldi	r24, 0x03	; 3
    1586:	62 e0       	ldi	r22, 0x02	; 2
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>
}
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <LCD_voidInit>:

void LCD_voidInit(void)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
	/*Wait more that 40 ms*/

	LCD_voidSendCommand(Fun_Enable);
    159e:	88 e3       	ldi	r24, 0x38	; 56
    15a0:	0e 94 96 0a 	call	0x152c	; 0x152c <LCD_voidSendCommand>

	LCD_voidSendCommand(DISPLAY_ON_OF);
    15a4:	8c e0       	ldi	r24, 0x0C	; 12
    15a6:	0e 94 96 0a 	call	0x152c	; 0x152c <LCD_voidSendCommand>

	LCD_voidSendCommand(DISPLAY_Clr);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	0e 94 96 0a 	call	0x152c	; 0x152c <LCD_voidSendCommand>



}
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <LCD_voidSendData>:


void LCD_voidSendData(u8 copy_u8Data)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	0f 92       	push	r0
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	89 83       	std	Y+1, r24	; 0x01

	/*Setting RS pin to HIGH*/
	DIO_enumSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>
	/*Setting RW pin low for write*/
	DIO_enumSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    15cc:	83 e0       	ldi	r24, 0x03	; 3
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>

	/*Set data pins*/
	DIO_enumSetPortValue(LCD_DATA_PORT,copy_u8Data);
    15d6:	82 e0       	ldi	r24, 0x02	; 2
    15d8:	69 81       	ldd	r22, Y+1	; 0x01
    15da:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_enumSetPortValue>

	/*Send Enable pulse*/
	DIO_enumSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	62 e0       	ldi	r22, 0x02	; 2
    15e2:	41 e0       	ldi	r20, 0x01	; 1
    15e4:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>

	DIO_enumSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	62 e0       	ldi	r22, 0x02	; 2
    15ec:	40 e0       	ldi	r20, 0x00	; 0
    15ee:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>


}
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <LCD_voidSendString>:

void LCD_voidSendString(const char* Copy_u8String)
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <LCD_voidSendString+0x6>
    1600:	0f 92       	push	r0
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	9b 83       	std	Y+3, r25	; 0x03
    1608:	8a 83       	std	Y+2, r24	; 0x02
u8 Local_u8Counter=0;
    160a:	19 82       	std	Y+1, r1	; 0x01
    160c:	0e c0       	rjmp	.+28     	; 0x162a <LCD_voidSendString+0x30>
while(Copy_u8String[Local_u8Counter]!='\0')
{
    LCD_voidSendData(Copy_u8String[Local_u8Counter]);
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	9b 81       	ldd	r25, Y+3	; 0x03
    1618:	fc 01       	movw	r30, r24
    161a:	e2 0f       	add	r30, r18
    161c:	f3 1f       	adc	r31, r19
    161e:	80 81       	ld	r24, Z
    1620:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendData>
    Local_u8Counter++;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	8f 5f       	subi	r24, 0xFF	; 255
    1628:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(const char* Copy_u8String)
{
u8 Local_u8Counter=0;
while(Copy_u8String[Local_u8Counter]!='\0')
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	9b 81       	ldd	r25, Y+3	; 0x03
    1634:	fc 01       	movw	r30, r24
    1636:	e2 0f       	add	r30, r18
    1638:	f3 1f       	adc	r31, r19
    163a:	80 81       	ld	r24, Z
    163c:	88 23       	and	r24, r24
    163e:	39 f7       	brne	.-50     	; 0x160e <LCD_voidSendString+0x14>
{
    LCD_voidSendData(Copy_u8String[Local_u8Counter]);
    Local_u8Counter++;
}

}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8Xposition,u8 Copy_u8Yposition)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <LCD_voidGoToXY+0x6>
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	8a 83       	std	Y+2, r24	; 0x02
    165a:	6b 83       	std	Y+3, r22	; 0x03
  u8 Local_u8Address;

  if(Copy_u8Xposition==0)
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	88 23       	and	r24, r24
    1660:	19 f4       	brne	.+6      	; 0x1668 <LCD_voidGoToXY+0x1c>
  {
	  Local_u8Address=Copy_u8Yposition;
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	06 c0       	rjmp	.+12     	; 0x1674 <LCD_voidGoToXY+0x28>
  }
  else if(Copy_u8Xposition==1)
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	19 f4       	brne	.+6      	; 0x1674 <LCD_voidGoToXY+0x28>

  {
	  Local_u8Address=Copy_u8Yposition+0x40;
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	80 5c       	subi	r24, 0xC0	; 192
    1672:	89 83       	std	Y+1, r24	; 0x01
  }

  LCD_voidSendCommand(Local_u8Address|(1<<7));
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	80 68       	ori	r24, 0x80	; 128
    1678:	0e 94 96 0a 	call	0x152c	; 0x152c <LCD_voidSendCommand>

  //LCD_voidSendCommand(SET_BIT(Local_u8Address,7));
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 copy_u32Number)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	27 97       	sbiw	r28, 0x07	; 7
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	6c 83       	std	Y+4, r22	; 0x04
    169e:	7d 83       	std	Y+5, r23	; 0x05
    16a0:	8e 83       	std	Y+6, r24	; 0x06
    16a2:	9f 83       	std	Y+7, r25	; 0x07
	u8 Local_u8Digit;
	u8 Local_u8Counter1=0;
    16a4:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_u8Counter2;
	static u8 Local_ArrayOfChar[10]={'0','1','2','3','4','5','6','7','8','9'};
	static u8 Local_ArrayOfDigits[10];

	if(copy_u32Number==0)
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	9d 81       	ldd	r25, Y+5	; 0x05
    16aa:	ae 81       	ldd	r26, Y+6	; 0x06
    16ac:	bf 81       	ldd	r27, Y+7	; 0x07
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	a1 05       	cpc	r26, r1
    16b2:	b1 05       	cpc	r27, r1
    16b4:	d1 f5       	brne	.+116    	; 0x172a <LCD_voidWriteNumber+0xa2>
	{
		LCD_voidSendData(Local_ArrayOfChar[0]);
    16b6:	80 91 80 00 	lds	r24, 0x0080
    16ba:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendData>
    16be:	50 c0       	rjmp	.+160    	; 0x1760 <LCD_voidWriteNumber+0xd8>
	else
	{

		while(copy_u32Number>0)
		{
			Local_u8Digit=copy_u32Number%10;
    16c0:	8c 81       	ldd	r24, Y+4	; 0x04
    16c2:	9d 81       	ldd	r25, Y+5	; 0x05
    16c4:	ae 81       	ldd	r26, Y+6	; 0x06
    16c6:	bf 81       	ldd	r27, Y+7	; 0x07
    16c8:	2a e0       	ldi	r18, 0x0A	; 10
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__udivmodsi4>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	8b 83       	std	Y+3, r24	; 0x03
			copy_u32Number=copy_u32Number/10;
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	9d 81       	ldd	r25, Y+5	; 0x05
    16e2:	ae 81       	ldd	r26, Y+6	; 0x06
    16e4:	bf 81       	ldd	r27, Y+7	; 0x07
    16e6:	2a e0       	ldi	r18, 0x0A	; 10
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__udivmodsi4>
    16f6:	da 01       	movw	r26, r20
    16f8:	c9 01       	movw	r24, r18
    16fa:	8c 83       	std	Y+4, r24	; 0x04
    16fc:	9d 83       	std	Y+5, r25	; 0x05
    16fe:	ae 83       	std	Y+6, r26	; 0x06
    1700:	bf 83       	std	Y+7, r27	; 0x07
			Local_ArrayOfDigits[Local_u8Counter1+1]=Local_ArrayOfChar[Local_u8Digit];
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9c 01       	movw	r18, r24
    170a:	2f 5f       	subi	r18, 0xFF	; 255
    170c:	3f 4f       	sbci	r19, 0xFF	; 255
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	fc 01       	movw	r30, r24
    1716:	e0 58       	subi	r30, 0x80	; 128
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	80 81       	ld	r24, Z
    171c:	f9 01       	movw	r30, r18
    171e:	e0 57       	subi	r30, 0x70	; 112
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 83       	st	Z, r24
			Local_u8Counter1++;
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	8f 5f       	subi	r24, 0xFF	; 255
    1728:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendData(Local_ArrayOfChar[0]);
	}
	else
	{

		while(copy_u32Number>0)
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	ae 81       	ldd	r26, Y+6	; 0x06
    1730:	bf 81       	ldd	r27, Y+7	; 0x07
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	a1 05       	cpc	r26, r1
    1736:	b1 05       	cpc	r27, r1
    1738:	19 f6       	brne	.-122    	; 0x16c0 <LCD_voidWriteNumber+0x38>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter1+1]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter1++;
		}

		for(Local_u8Counter2=Local_u8Counter1;Local_u8Counter2>=0;Local_u8Counter2--)
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	0d c0       	rjmp	.+26     	; 0x175a <LCD_voidWriteNumber+0xd2>
		{
			LCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	99 27       	eor	r25, r25
    1744:	87 fd       	sbrc	r24, 7
    1746:	90 95       	com	r25
    1748:	fc 01       	movw	r30, r24
    174a:	e0 57       	subi	r30, 0x70	; 112
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 81       	ld	r24, Z
    1750:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendData>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter1+1]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter1++;
		}

		for(Local_u8Counter2=Local_u8Counter1;Local_u8Counter2>=0;Local_u8Counter2--)
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	81 50       	subi	r24, 0x01	; 1
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	88 23       	and	r24, r24
    175e:	84 f7       	brge	.-32     	; 0x1740 <LCD_voidWriteNumber+0xb8>
		{
			LCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
		}
	}
}
    1760:	27 96       	adiw	r28, 0x07	; 7
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <CLCD_voidSendNumber>:
void CLCD_voidSendNumber   ( u32 Copy_s64Number    ){
    1772:	ef 92       	push	r14
    1774:	ff 92       	push	r15
    1776:	0f 93       	push	r16
    1778:	1f 93       	push	r17
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	28 97       	sbiw	r28, 0x08	; 8
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	6d 83       	std	Y+5, r22	; 0x05
    1790:	7e 83       	std	Y+6, r23	; 0x06
    1792:	8f 83       	std	Y+7, r24	; 0x07
    1794:	98 87       	std	Y+8, r25	; 0x08

	u32 LOC_u64Reversed = 1 ;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a0 e0       	ldi	r26, 0x00	; 0
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	9a 83       	std	Y+2, r25	; 0x02
    17a2:	ab 83       	std	Y+3, r26	; 0x03
    17a4:	bc 83       	std	Y+4, r27	; 0x04
	if( Copy_s64Number == 0 ){ LCD_voidSendData('0'); }
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	af 81       	ldd	r26, Y+7	; 0x07
    17ac:	b8 85       	ldd	r27, Y+8	; 0x08
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	a1 05       	cpc	r26, r1
    17b2:	b1 05       	cpc	r27, r1
    17b4:	d1 f5       	brne	.+116    	; 0x182a <CLCD_voidSendNumber+0xb8>
    17b6:	80 e3       	ldi	r24, 0x30	; 48
    17b8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendData>
    17bc:	6b c0       	rjmp	.+214    	; 0x1894 <CLCD_voidSendNumber+0x122>

	else{

		while( Copy_s64Number != 0 ){

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_s64Number % 10 );
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	9a 81       	ldd	r25, Y+2	; 0x02
    17c2:	ab 81       	ldd	r26, Y+3	; 0x03
    17c4:	bc 81       	ldd	r27, Y+4	; 0x04
    17c6:	2a e0       	ldi	r18, 0x0A	; 10
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsi3>
    17d6:	7b 01       	movw	r14, r22
    17d8:	8c 01       	movw	r16, r24
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	af 81       	ldd	r26, Y+7	; 0x07
    17e0:	b8 85       	ldd	r27, Y+8	; 0x08
    17e2:	2a e0       	ldi	r18, 0x0A	; 10
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__udivmodsi4>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	8e 0d       	add	r24, r14
    17f8:	9f 1d       	adc	r25, r15
    17fa:	a0 1f       	adc	r26, r16
    17fc:	b1 1f       	adc	r27, r17
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	ab 83       	std	Y+3, r26	; 0x03
    1804:	bc 83       	std	Y+4, r27	; 0x04
			Copy_s64Number /= 10 ;
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	af 81       	ldd	r26, Y+7	; 0x07
    180c:	b8 85       	ldd	r27, Y+8	; 0x08
    180e:	2a e0       	ldi	r18, 0x0A	; 10
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__udivmodsi4>
    181e:	da 01       	movw	r26, r20
    1820:	c9 01       	movw	r24, r18
    1822:	8d 83       	std	Y+5, r24	; 0x05
    1824:	9e 83       	std	Y+6, r25	; 0x06
    1826:	af 83       	std	Y+7, r26	; 0x07
    1828:	b8 87       	std	Y+8, r27	; 0x08
	u32 LOC_u64Reversed = 1 ;
	if( Copy_s64Number == 0 ){ LCD_voidSendData('0'); }

	else{

		while( Copy_s64Number != 0 ){
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	9e 81       	ldd	r25, Y+6	; 0x06
    182e:	af 81       	ldd	r26, Y+7	; 0x07
    1830:	b8 85       	ldd	r27, Y+8	; 0x08
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	a1 05       	cpc	r26, r1
    1836:	b1 05       	cpc	r27, r1
    1838:	11 f6       	brne	.-124    	; 0x17be <CLCD_voidSendNumber+0x4c>
    183a:	23 c0       	rjmp	.+70     	; 0x1882 <CLCD_voidSendNumber+0x110>
			Copy_s64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){

			LCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	ab 81       	ldd	r26, Y+3	; 0x03
    1842:	bc 81       	ldd	r27, Y+4	; 0x04
    1844:	2a e0       	ldi	r18, 0x0A	; 10
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__udivmodsi4>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	80 5d       	subi	r24, 0xD0	; 208
    185a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendData>
			LOC_u64Reversed /= 10 ;
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	ab 81       	ldd	r26, Y+3	; 0x03
    1864:	bc 81       	ldd	r27, Y+4	; 0x04
    1866:	2a e0       	ldi	r18, 0x0A	; 10
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e0       	ldi	r20, 0x00	; 0
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__udivmodsi4>
    1876:	da 01       	movw	r26, r20
    1878:	c9 01       	movw	r24, r18
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	ab 83       	std	Y+3, r26	; 0x03
    1880:	bc 83       	std	Y+4, r27	; 0x04

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_s64Number % 10 );
			Copy_s64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	ab 81       	ldd	r26, Y+3	; 0x03
    1888:	bc 81       	ldd	r27, Y+4	; 0x04
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	91 05       	cpc	r25, r1
    188e:	a1 05       	cpc	r26, r1
    1890:	b1 05       	cpc	r27, r1
    1892:	a1 f6       	brne	.-88     	; 0x183c <CLCD_voidSendNumber+0xca>
			LCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
			LOC_u64Reversed /= 10 ;

		}

	}}
    1894:	28 96       	adiw	r28, 0x08	; 8
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	ff 90       	pop	r15
    18aa:	ef 90       	pop	r14
    18ac:	08 95       	ret

000018ae <LCD_voidClearScreen>:

void LCD_voidClearScreen(void){
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(DISPLAY_Clr);
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	0e 94 96 0a 	call	0x152c	; 0x152c <LCD_voidSendCommand>
}
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <LED_voidInit>:
#include "BIT_MATH.h"
#include "LED_Interface.h"


void LED_voidInit(LED_Confgration Led_u8Conf)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <LED_voidInit+0x6>
    18c8:	0f 92       	push	r0
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	69 83       	std	Y+1, r22	; 0x01
    18d0:	7a 83       	std	Y+2, r23	; 0x02
    18d2:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(Led_u8Conf.port,Led_u8Conf.pin,DIO_OUTPUT);
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	69 2f       	mov	r22, r25
    18da:	41 e0       	ldi	r20, 0x01	; 1
    18dc:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_enumSetPinDirection>

}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <LED_voidOn>:
void LED_voidOn(LED_Confgration Led_u8Conf){
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <LED_voidOn+0x6>
    18f2:	0f 92       	push	r0
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	69 83       	std	Y+1, r22	; 0x01
    18fa:	7a 83       	std	Y+2, r23	; 0x02
    18fc:	8b 83       	std	Y+3, r24	; 0x03
	if(Led_u8Conf.Active_State==ACTIVE_HIGH){
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	39 f4       	brne	.+14     	; 0x1912 <LED_voidOn+0x26>
		DIO_enumSetPinValue(Led_u8Conf.port,Led_u8Conf.pin,DIO_HIGH);
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	69 2f       	mov	r22, r25
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>
    1910:	06 c0       	rjmp	.+12     	; 0x191e <LED_voidOn+0x32>
	}
	else
	{
		DIO_enumSetPinValue(Led_u8Conf.port,Led_u8Conf.pin,DIO_LOW);
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	69 2f       	mov	r22, r25
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>
	}

}
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <LED_voidOff>:
void LED_voidOff(LED_Confgration Led_u8Conf){
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	00 d0       	rcall	.+0      	; 0x1930 <LED_voidOff+0x6>
    1930:	0f 92       	push	r0
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	69 83       	std	Y+1, r22	; 0x01
    1938:	7a 83       	std	Y+2, r23	; 0x02
    193a:	8b 83       	std	Y+3, r24	; 0x03
	if(Led_u8Conf.Active_State==ACTIVE_HIGH){
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	39 f4       	brne	.+14     	; 0x1950 <LED_voidOff+0x26>
		DIO_enumSetPinValue(Led_u8Conf.port,Led_u8Conf.pin,DIO_LOW);
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	69 2f       	mov	r22, r25
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>
    194e:	06 c0       	rjmp	.+12     	; 0x195c <LED_voidOff+0x32>
	}
	else
	{
		DIO_enumSetPinValue(Led_u8Conf.port,Led_u8Conf.pin,DIO_HIGH);
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	9a 81       	ldd	r25, Y+2	; 0x02
    1954:	69 2f       	mov	r22, r25
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_enumSetPinValue>
	}

}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <LED_voidToggle>:
void LED_voidToggle(LED_Confgration Led_u8Conf){
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <LED_voidToggle+0x6>
    196e:	0f 92       	push	r0
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	69 83       	std	Y+1, r22	; 0x01
    1976:	7a 83       	std	Y+2, r23	; 0x02
    1978:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(Led_u8Conf.port,Led_u8Conf.pin);
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	69 2f       	mov	r22, r25
    1980:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_enumTogglePinValue>
}
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <calc>:
#include "DIO_INTERFACE.h"
#include "DIO_configration.h"
#include <stdio.h>
#include <stdlib.h>
#include <util/delay.h>
void calc(){
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	eb 97       	sbiw	r28, 0x3b	; 59
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8GetPressed;
	u8 opration1[16];
	u8 opration2[16];
	u8 coun1,coun2,code;
	LED_Confgration LED1={DIO_PORTB,DIO_PIN0,DIO_HIGH};
    19a4:	9e 01       	movw	r18, r28
    19a6:	26 5d       	subi	r18, 0xD6	; 214
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	3b ab       	std	Y+51, r19	; 0x33
    19ac:	2a ab       	std	Y+50, r18	; 0x32
    19ae:	8d e8       	ldi	r24, 0x8D	; 141
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9d ab       	std	Y+53, r25	; 0x35
    19b4:	8c ab       	std	Y+52, r24	; 0x34
    19b6:	93 e0       	ldi	r25, 0x03	; 3
    19b8:	9e ab       	std	Y+54, r25	; 0x36
    19ba:	ec a9       	ldd	r30, Y+52	; 0x34
    19bc:	fd a9       	ldd	r31, Y+53	; 0x35
    19be:	00 80       	ld	r0, Z
    19c0:	2c a9       	ldd	r18, Y+52	; 0x34
    19c2:	3d a9       	ldd	r19, Y+53	; 0x35
    19c4:	2f 5f       	subi	r18, 0xFF	; 255
    19c6:	3f 4f       	sbci	r19, 0xFF	; 255
    19c8:	3d ab       	std	Y+53, r19	; 0x35
    19ca:	2c ab       	std	Y+52, r18	; 0x34
    19cc:	ea a9       	ldd	r30, Y+50	; 0x32
    19ce:	fb a9       	ldd	r31, Y+51	; 0x33
    19d0:	00 82       	st	Z, r0
    19d2:	2a a9       	ldd	r18, Y+50	; 0x32
    19d4:	3b a9       	ldd	r19, Y+51	; 0x33
    19d6:	2f 5f       	subi	r18, 0xFF	; 255
    19d8:	3f 4f       	sbci	r19, 0xFF	; 255
    19da:	3b ab       	std	Y+51, r19	; 0x33
    19dc:	2a ab       	std	Y+50, r18	; 0x32
    19de:	3e a9       	ldd	r19, Y+54	; 0x36
    19e0:	31 50       	subi	r19, 0x01	; 1
    19e2:	3e ab       	std	Y+54, r19	; 0x36
    19e4:	8e a9       	ldd	r24, Y+54	; 0x36
    19e6:	88 23       	and	r24, r24
    19e8:	41 f7       	brne	.-48     	; 0x19ba <calc+0x2a>
	LED_voidInit(LED1);
    19ea:	6a a5       	ldd	r22, Y+42	; 0x2a
    19ec:	7b a5       	ldd	r23, Y+43	; 0x2b
    19ee:	8c a5       	ldd	r24, Y+44	; 0x2c
    19f0:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LED_voidInit>
	LED_Confgration LED2={DIO_PORTB,DIO_PIN1,DIO_HIGH};
    19f4:	fe 01       	movw	r30, r28
    19f6:	bd 96       	adiw	r30, 0x2d	; 45
    19f8:	f8 af       	std	Y+56, r31	; 0x38
    19fa:	ef ab       	std	Y+55, r30	; 0x37
    19fc:	2a e8       	ldi	r18, 0x8A	; 138
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	3a af       	std	Y+58, r19	; 0x3a
    1a02:	29 af       	std	Y+57, r18	; 0x39
    1a04:	33 e0       	ldi	r19, 0x03	; 3
    1a06:	3b af       	std	Y+59, r19	; 0x3b
    1a08:	e9 ad       	ldd	r30, Y+57	; 0x39
    1a0a:	fa ad       	ldd	r31, Y+58	; 0x3a
    1a0c:	00 80       	ld	r0, Z
    1a0e:	29 ad       	ldd	r18, Y+57	; 0x39
    1a10:	3a ad       	ldd	r19, Y+58	; 0x3a
    1a12:	2f 5f       	subi	r18, 0xFF	; 255
    1a14:	3f 4f       	sbci	r19, 0xFF	; 255
    1a16:	3a af       	std	Y+58, r19	; 0x3a
    1a18:	29 af       	std	Y+57, r18	; 0x39
    1a1a:	ef a9       	ldd	r30, Y+55	; 0x37
    1a1c:	f8 ad       	ldd	r31, Y+56	; 0x38
    1a1e:	00 82       	st	Z, r0
    1a20:	2f a9       	ldd	r18, Y+55	; 0x37
    1a22:	38 ad       	ldd	r19, Y+56	; 0x38
    1a24:	2f 5f       	subi	r18, 0xFF	; 255
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	38 af       	std	Y+56, r19	; 0x38
    1a2a:	2f ab       	std	Y+55, r18	; 0x37
    1a2c:	3b ad       	ldd	r19, Y+59	; 0x3b
    1a2e:	31 50       	subi	r19, 0x01	; 1
    1a30:	3b af       	std	Y+59, r19	; 0x3b
    1a32:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a34:	88 23       	and	r24, r24
    1a36:	41 f7       	brne	.-48     	; 0x1a08 <calc+0x78>
	LED_voidInit(LED2);
    1a38:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a3a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a3e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LED_voidInit>

	for(u8 op1=0;op1<=16;op1++){
    1a42:	1a 82       	std	Y+2, r1	; 0x02
    1a44:	4b c0       	rjmp	.+150    	; 0x1adc <calc+0x14c>
		LED_voidOn(LED1);
    1a46:	6a a5       	ldd	r22, Y+42	; 0x2a
    1a48:	7b a5       	ldd	r23, Y+43	; 0x2b
    1a4a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a4c:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LED_voidOn>
		do{
			Local_u8GetPressed = KPD_u8GetPressedKey();}
    1a50:	0e 94 99 09 	call	0x1332	; 0x1332 <KPD_u8GetPressedKey>
    1a54:	89 87       	std	Y+9, r24	; 0x09
		while(Local_u8GetPressed==0xff);
    1a56:	89 85       	ldd	r24, Y+9	; 0x09
    1a58:	8f 3f       	cpi	r24, 0xFF	; 255
    1a5a:	d1 f3       	breq	.-12     	; 0x1a50 <calc+0xc0>


		if(Local_u8GetPressed!='*'&&Local_u8GetPressed!='+'&&Local_u8GetPressed!='-'&&Local_u8GetPressed!='/'&&Local_u8GetPressed!='='&&Local_u8GetPressed!='c'){
    1a5c:	89 85       	ldd	r24, Y+9	; 0x09
    1a5e:	8a 32       	cpi	r24, 0x2A	; 42
    1a60:	19 f1       	breq	.+70     	; 0x1aa8 <calc+0x118>
    1a62:	89 85       	ldd	r24, Y+9	; 0x09
    1a64:	8b 32       	cpi	r24, 0x2B	; 43
    1a66:	01 f1       	breq	.+64     	; 0x1aa8 <calc+0x118>
    1a68:	89 85       	ldd	r24, Y+9	; 0x09
    1a6a:	8d 32       	cpi	r24, 0x2D	; 45
    1a6c:	e9 f0       	breq	.+58     	; 0x1aa8 <calc+0x118>
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	8f 32       	cpi	r24, 0x2F	; 47
    1a72:	d1 f0       	breq	.+52     	; 0x1aa8 <calc+0x118>
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	8d 33       	cpi	r24, 0x3D	; 61
    1a78:	b9 f0       	breq	.+46     	; 0x1aa8 <calc+0x118>
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	83 36       	cpi	r24, 0x63	; 99
    1a7e:	a1 f0       	breq	.+40     	; 0x1aa8 <calc+0x118>

			LCD_voidSendData(Local_u8GetPressed);
    1a80:	89 85       	ldd	r24, Y+9	; 0x09
    1a82:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendData>
			opration1[op1]=Local_u8GetPressed;
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	0a 96       	adiw	r24, 0x0a	; 10
    1a90:	fc 01       	movw	r30, r24
    1a92:	e2 0f       	add	r30, r18
    1a94:	f3 1f       	adc	r31, r19
    1a96:	89 85       	ldd	r24, Y+9	; 0x09
    1a98:	80 83       	st	Z, r24
			coun1++;
    1a9a:	88 85       	ldd	r24, Y+8	; 0x08
    1a9c:	8f 5f       	subi	r24, 0xFF	; 255
    1a9e:	88 87       	std	Y+8, r24	; 0x08
	LED_Confgration LED1={DIO_PORTB,DIO_PIN0,DIO_HIGH};
	LED_voidInit(LED1);
	LED_Confgration LED2={DIO_PORTB,DIO_PIN1,DIO_HIGH};
	LED_voidInit(LED2);

	for(u8 op1=0;op1<=16;op1++){
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	8f 5f       	subi	r24, 0xFF	; 255
    1aa4:	8a 83       	std	Y+2, r24	; 0x02
    1aa6:	1a c0       	rjmp	.+52     	; 0x1adc <calc+0x14c>
			opration1[op1]=Local_u8GetPressed;
			coun1++;


		}
		else if(Local_u8GetPressed=='*'||Local_u8GetPressed!='+'||Local_u8GetPressed!='-'||Local_u8GetPressed!='/'){
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	8a 32       	cpi	r24, 0x2A	; 42
    1aac:	49 f0       	breq	.+18     	; 0x1ac0 <calc+0x130>
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	8b 32       	cpi	r24, 0x2B	; 43
    1ab2:	31 f4       	brne	.+12     	; 0x1ac0 <calc+0x130>
    1ab4:	89 85       	ldd	r24, Y+9	; 0x09
    1ab6:	8d 32       	cpi	r24, 0x2D	; 45
    1ab8:	19 f4       	brne	.+6      	; 0x1ac0 <calc+0x130>
    1aba:	89 85       	ldd	r24, Y+9	; 0x09
    1abc:	8f 32       	cpi	r24, 0x2F	; 47
    1abe:	59 f0       	breq	.+22     	; 0x1ad6 <calc+0x146>

			LCD_voidSendData(Local_u8GetPressed);
    1ac0:	89 85       	ldd	r24, Y+9	; 0x09
    1ac2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendData>
			code =Local_u8GetPressed;
    1ac6:	89 85       	ldd	r24, Y+9	; 0x09
    1ac8:	8e 83       	std	Y+6, r24	; 0x06
			LED_voidOff(LED1);
    1aca:	6a a5       	ldd	r22, Y+42	; 0x2a
    1acc:	7b a5       	ldd	r23, Y+43	; 0x2b
    1ace:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ad0:	0e 94 95 0c 	call	0x192a	; 0x192a <LED_voidOff>
    1ad4:	07 c0       	rjmp	.+14     	; 0x1ae4 <calc+0x154>


			break;
		}
		else{
			LCD_voidClearScreen();
    1ad6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD_voidClearScreen>
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <calc+0x154>
	LED_Confgration LED1={DIO_PORTB,DIO_PIN0,DIO_HIGH};
	LED_voidInit(LED1);
	LED_Confgration LED2={DIO_PORTB,DIO_PIN1,DIO_HIGH};
	LED_voidInit(LED2);

	for(u8 op1=0;op1<=16;op1++){
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	81 31       	cpi	r24, 0x11	; 17
    1ae0:	08 f4       	brcc	.+2      	; 0x1ae4 <calc+0x154>
    1ae2:	b1 cf       	rjmp	.-158    	; 0x1a46 <calc+0xb6>
			LCD_voidClearScreen();

			break;
		}
	}
	for(u8 op1=0;op1<=16;op1++){
    1ae4:	19 82       	std	Y+1, r1	; 0x01
    1ae6:	3d c0       	rjmp	.+122    	; 0x1b62 <calc+0x1d2>
		LED_voidOn(LED2);
    1ae8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1aea:	7e a5       	ldd	r23, Y+46	; 0x2e
    1aec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aee:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LED_voidOn>
		do{
			Local_u8GetPressed = KPD_u8GetPressedKey();}
    1af2:	0e 94 99 09 	call	0x1332	; 0x1332 <KPD_u8GetPressedKey>
    1af6:	89 87       	std	Y+9, r24	; 0x09
		while(Local_u8GetPressed==0xff);
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	8f 3f       	cpi	r24, 0xFF	; 255
    1afc:	d1 f3       	breq	.-12     	; 0x1af2 <calc+0x162>
		if(Local_u8GetPressed!='*'&&Local_u8GetPressed!='+'&&Local_u8GetPressed!='-'&&Local_u8GetPressed!='/'&&Local_u8GetPressed!='='&&Local_u8GetPressed!='c'){
    1afe:	89 85       	ldd	r24, Y+9	; 0x09
    1b00:	8a 32       	cpi	r24, 0x2A	; 42
    1b02:	01 f1       	breq	.+64     	; 0x1b44 <calc+0x1b4>
    1b04:	89 85       	ldd	r24, Y+9	; 0x09
    1b06:	8b 32       	cpi	r24, 0x2B	; 43
    1b08:	e9 f0       	breq	.+58     	; 0x1b44 <calc+0x1b4>
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	8d 32       	cpi	r24, 0x2D	; 45
    1b0e:	d1 f0       	breq	.+52     	; 0x1b44 <calc+0x1b4>
    1b10:	89 85       	ldd	r24, Y+9	; 0x09
    1b12:	8f 32       	cpi	r24, 0x2F	; 47
    1b14:	b9 f0       	breq	.+46     	; 0x1b44 <calc+0x1b4>
    1b16:	89 85       	ldd	r24, Y+9	; 0x09
    1b18:	8d 33       	cpi	r24, 0x3D	; 61
    1b1a:	a1 f0       	breq	.+40     	; 0x1b44 <calc+0x1b4>
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	83 36       	cpi	r24, 0x63	; 99
    1b20:	89 f0       	breq	.+34     	; 0x1b44 <calc+0x1b4>
			LCD_voidSendData(Local_u8GetPressed);
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendData>
			opration2[op1]=Local_u8GetPressed;
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	ce 01       	movw	r24, r28
    1b30:	4a 96       	adiw	r24, 0x1a	; 26
    1b32:	fc 01       	movw	r30, r24
    1b34:	e2 0f       	add	r30, r18
    1b36:	f3 1f       	adc	r31, r19
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	80 83       	st	Z, r24
			coun2++;
    1b3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3e:	8f 5f       	subi	r24, 0xFF	; 255
    1b40:	8f 83       	std	Y+7, r24	; 0x07
    1b42:	0c c0       	rjmp	.+24     	; 0x1b5c <calc+0x1cc>

		}
		else if(Local_u8GetPressed=='='){
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	8d 33       	cpi	r24, 0x3D	; 61
    1b48:	49 f4       	brne	.+18     	; 0x1b5c <calc+0x1cc>

			LCD_voidSendData(Local_u8GetPressed);
    1b4a:	89 85       	ldd	r24, Y+9	; 0x09
    1b4c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendData>
			LED_voidOff(LED2);
    1b50:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b52:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b56:	0e 94 95 0c 	call	0x192a	; 0x192a <LED_voidOff>
    1b5a:	07 c0       	rjmp	.+14     	; 0x1b6a <calc+0x1da>
			LCD_voidClearScreen();

			break;
		}
	}
	for(u8 op1=0;op1<=16;op1++){
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	8f 5f       	subi	r24, 0xFF	; 255
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	81 31       	cpi	r24, 0x11	; 17
    1b66:	08 f4       	brcc	.+2      	; 0x1b6a <calc+0x1da>
    1b68:	bf cf       	rjmp	.-130    	; 0x1ae8 <calc+0x158>


	}


	u8 res1 = atoi(opration1);
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	0a 96       	adiw	r24, 0x0a	; 10
    1b6e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <atoi>
    1b72:	8d 83       	std	Y+5, r24	; 0x05
	u8 res2 = atoi(opration2);
    1b74:	ce 01       	movw	r24, r28
    1b76:	4a 96       	adiw	r24, 0x1a	; 26
    1b78:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <atoi>
    1b7c:	8c 83       	std	Y+4, r24	; 0x04
	u8 res;

	LCD_voidGoToXY(1,0);
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	0e 94 26 0b 	call	0x164c	; 0x164c <LCD_voidGoToXY>


	switch(code){
    1b86:	8e 81       	ldd	r24, Y+6	; 0x06
    1b88:	e8 2f       	mov	r30, r24
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	f9 ab       	std	Y+49, r31	; 0x31
    1b8e:	e8 ab       	std	Y+48, r30	; 0x30
    1b90:	28 a9       	ldd	r18, Y+48	; 0x30
    1b92:	39 a9       	ldd	r19, Y+49	; 0x31
    1b94:	2b 32       	cpi	r18, 0x2B	; 43
    1b96:	31 05       	cpc	r19, r1
    1b98:	b9 f0       	breq	.+46     	; 0x1bc8 <calc+0x238>
    1b9a:	88 a9       	ldd	r24, Y+48	; 0x30
    1b9c:	99 a9       	ldd	r25, Y+49	; 0x31
    1b9e:	8c 32       	cpi	r24, 0x2C	; 44
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	34 f4       	brge	.+12     	; 0x1bb0 <calc+0x220>
    1ba4:	e8 a9       	ldd	r30, Y+48	; 0x30
    1ba6:	f9 a9       	ldd	r31, Y+49	; 0x31
    1ba8:	ea 32       	cpi	r30, 0x2A	; 42
    1baa:	f1 05       	cpc	r31, r1
    1bac:	d9 f0       	breq	.+54     	; 0x1be4 <calc+0x254>
    1bae:	61 c0       	rjmp	.+194    	; 0x1c72 <calc+0x2e2>
    1bb0:	28 a9       	ldd	r18, Y+48	; 0x30
    1bb2:	39 a9       	ldd	r19, Y+49	; 0x31
    1bb4:	2d 32       	cpi	r18, 0x2D	; 45
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	29 f1       	breq	.+74     	; 0x1c04 <calc+0x274>
    1bba:	88 a9       	ldd	r24, Y+48	; 0x30
    1bbc:	99 a9       	ldd	r25, Y+49	; 0x31
    1bbe:	8f 32       	cpi	r24, 0x2F	; 47
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <calc+0x236>
    1bc4:	46 c0       	rjmp	.+140    	; 0x1c52 <calc+0x2c2>
    1bc6:	55 c0       	rjmp	.+170    	; 0x1c72 <calc+0x2e2>
	case '+':


		res=res2+res1;
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	89 0f       	add	r24, r25
    1bce:	8b 83       	std	Y+3, r24	; 0x03

		LCD_voidWriteNumber(res);
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	88 2f       	mov	r24, r24
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a0 e0       	ldi	r26, 0x00	; 0
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	bc 01       	movw	r22, r24
    1bdc:	cd 01       	movw	r24, r26
    1bde:	0e 94 44 0b 	call	0x1688	; 0x1688 <LCD_voidWriteNumber>
    1be2:	49 c0       	rjmp	.+146    	; 0x1c76 <calc+0x2e6>

		break;
	case '*':
		res=res1*res2;
    1be4:	9d 81       	ldd	r25, Y+5	; 0x05
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
    1be8:	98 9f       	mul	r25, r24
    1bea:	80 2d       	mov	r24, r0
    1bec:	11 24       	eor	r1, r1
    1bee:	8b 83       	std	Y+3, r24	; 0x03

		LCD_voidWriteNumber(res);
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	88 2f       	mov	r24, r24
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	a0 e0       	ldi	r26, 0x00	; 0
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 44 0b 	call	0x1688	; 0x1688 <LCD_voidWriteNumber>
    1c02:	39 c0       	rjmp	.+114    	; 0x1c76 <calc+0x2e6>
		break;
	case '-':
		res=res1-res2;
    1c04:	9d 81       	ldd	r25, Y+5	; 0x05
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	e9 2f       	mov	r30, r25
    1c0a:	e8 1b       	sub	r30, r24
    1c0c:	8e 2f       	mov	r24, r30
    1c0e:	8b 83       	std	Y+3, r24	; 0x03
		if(res1>res2){
    1c10:	9d 81       	ldd	r25, Y+5	; 0x05
    1c12:	8c 81       	ldd	r24, Y+4	; 0x04
    1c14:	89 17       	cp	r24, r25
    1c16:	50 f4       	brcc	.+20     	; 0x1c2c <calc+0x29c>

			LCD_voidWriteNumber(res);
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	88 2f       	mov	r24, r24
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a0 e0       	ldi	r26, 0x00	; 0
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 44 0b 	call	0x1688	; 0x1688 <LCD_voidWriteNumber>
    1c2a:	25 c0       	rjmp	.+74     	; 0x1c76 <calc+0x2e6>
		}
		else {
			res=res2-res1;
    1c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	f9 2f       	mov	r31, r25
    1c32:	f8 1b       	sub	r31, r24
    1c34:	8f 2f       	mov	r24, r31
    1c36:	8b 83       	std	Y+3, r24	; 0x03
			LCD_voidSendData('-');
    1c38:	8d e2       	ldi	r24, 0x2D	; 45
    1c3a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendData>
			LCD_voidWriteNumber(res);
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a0 e0       	ldi	r26, 0x00	; 0
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 44 0b 	call	0x1688	; 0x1688 <LCD_voidWriteNumber>
    1c50:	12 c0       	rjmp	.+36     	; 0x1c76 <calc+0x2e6>
		}
		break;
	case '/':
		res=res1/res2;
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9c 81       	ldd	r25, Y+4	; 0x04
    1c56:	69 2f       	mov	r22, r25
    1c58:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__udivmodqi4>
    1c5c:	8b 83       	std	Y+3, r24	; 0x03


		LCD_voidWriteNumber(res);
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a0 e0       	ldi	r26, 0x00	; 0
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	0e 94 44 0b 	call	0x1688	; 0x1688 <LCD_voidWriteNumber>
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <calc+0x2e6>

		break;
	default:
		LCD_voidClearScreen();
    1c72:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD_voidClearScreen>
		break;


	}
	do{
		Local_u8GetPressed = KPD_u8GetPressedKey();}
    1c76:	0e 94 99 09 	call	0x1332	; 0x1332 <KPD_u8GetPressedKey>
    1c7a:	89 87       	std	Y+9, r24	; 0x09
	while(Local_u8GetPressed==0xff);
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c80:	d1 f3       	breq	.-12     	; 0x1c76 <calc+0x2e6>
	if(Local_u8GetPressed=='c'){
    1c82:	89 85       	ldd	r24, Y+9	; 0x09
    1c84:	83 36       	cpi	r24, 0x63	; 99
    1c86:	11 f4       	brne	.+4      	; 0x1c8c <calc+0x2fc>
		LCD_voidClearScreen();
    1c88:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD_voidClearScreen>
	}
	LCD_voidGoToXY(0,1);
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	0e 94 26 0b 	call	0x164c	; 0x164c <LCD_voidGoToXY>




}
    1c94:	eb 96       	adiw	r28, 0x3b	; 59
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <mul>:
#include "LED_Interface.h"
#include "LCD_INTERFACE.h"
#include "LCD_CONFG.h"
#include "calc.h"
#include <util/delay.h>
u16 mul(u8 num1,u8 num2){
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <mul+0x6>
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	6a 83       	std	Y+2, r22	; 0x02
	return num1*num2;
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	ac 01       	movw	r20, r24
    1cc2:	24 9f       	mul	r18, r20
    1cc4:	c0 01       	movw	r24, r0
    1cc6:	25 9f       	mul	r18, r21
    1cc8:	90 0d       	add	r25, r0
    1cca:	34 9f       	mul	r19, r20
    1ccc:	90 0d       	add	r25, r0
    1cce:	11 24       	eor	r1, r1
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <main>:
int main(){
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62



	KPD_INIT();
    1ce2:	0e 94 66 09 	call	0x12cc	; 0x12cc <KPD_INIT>

	LCD_voidInit();
    1ce6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <LCD_voidInit>

	while(1){

		calc();
    1cea:	0e 94 c8 0c 	call	0x1990	; 0x1990 <calc>
    1cee:	fd cf       	rjmp	.-6      	; 0x1cea <main+0x10>

00001cf0 <__mulsi3>:
    1cf0:	62 9f       	mul	r22, r18
    1cf2:	d0 01       	movw	r26, r0
    1cf4:	73 9f       	mul	r23, r19
    1cf6:	f0 01       	movw	r30, r0
    1cf8:	82 9f       	mul	r24, r18
    1cfa:	e0 0d       	add	r30, r0
    1cfc:	f1 1d       	adc	r31, r1
    1cfe:	64 9f       	mul	r22, r20
    1d00:	e0 0d       	add	r30, r0
    1d02:	f1 1d       	adc	r31, r1
    1d04:	92 9f       	mul	r25, r18
    1d06:	f0 0d       	add	r31, r0
    1d08:	83 9f       	mul	r24, r19
    1d0a:	f0 0d       	add	r31, r0
    1d0c:	74 9f       	mul	r23, r20
    1d0e:	f0 0d       	add	r31, r0
    1d10:	65 9f       	mul	r22, r21
    1d12:	f0 0d       	add	r31, r0
    1d14:	99 27       	eor	r25, r25
    1d16:	72 9f       	mul	r23, r18
    1d18:	b0 0d       	add	r27, r0
    1d1a:	e1 1d       	adc	r30, r1
    1d1c:	f9 1f       	adc	r31, r25
    1d1e:	63 9f       	mul	r22, r19
    1d20:	b0 0d       	add	r27, r0
    1d22:	e1 1d       	adc	r30, r1
    1d24:	f9 1f       	adc	r31, r25
    1d26:	bd 01       	movw	r22, r26
    1d28:	cf 01       	movw	r24, r30
    1d2a:	11 24       	eor	r1, r1
    1d2c:	08 95       	ret

00001d2e <__udivmodqi4>:
    1d2e:	99 1b       	sub	r25, r25
    1d30:	79 e0       	ldi	r23, 0x09	; 9
    1d32:	04 c0       	rjmp	.+8      	; 0x1d3c <__udivmodqi4_ep>

00001d34 <__udivmodqi4_loop>:
    1d34:	99 1f       	adc	r25, r25
    1d36:	96 17       	cp	r25, r22
    1d38:	08 f0       	brcs	.+2      	; 0x1d3c <__udivmodqi4_ep>
    1d3a:	96 1b       	sub	r25, r22

00001d3c <__udivmodqi4_ep>:
    1d3c:	88 1f       	adc	r24, r24
    1d3e:	7a 95       	dec	r23
    1d40:	c9 f7       	brne	.-14     	; 0x1d34 <__udivmodqi4_loop>
    1d42:	80 95       	com	r24
    1d44:	08 95       	ret

00001d46 <__udivmodsi4>:
    1d46:	a1 e2       	ldi	r26, 0x21	; 33
    1d48:	1a 2e       	mov	r1, r26
    1d4a:	aa 1b       	sub	r26, r26
    1d4c:	bb 1b       	sub	r27, r27
    1d4e:	fd 01       	movw	r30, r26
    1d50:	0d c0       	rjmp	.+26     	; 0x1d6c <__udivmodsi4_ep>

00001d52 <__udivmodsi4_loop>:
    1d52:	aa 1f       	adc	r26, r26
    1d54:	bb 1f       	adc	r27, r27
    1d56:	ee 1f       	adc	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	a2 17       	cp	r26, r18
    1d5c:	b3 07       	cpc	r27, r19
    1d5e:	e4 07       	cpc	r30, r20
    1d60:	f5 07       	cpc	r31, r21
    1d62:	20 f0       	brcs	.+8      	; 0x1d6c <__udivmodsi4_ep>
    1d64:	a2 1b       	sub	r26, r18
    1d66:	b3 0b       	sbc	r27, r19
    1d68:	e4 0b       	sbc	r30, r20
    1d6a:	f5 0b       	sbc	r31, r21

00001d6c <__udivmodsi4_ep>:
    1d6c:	66 1f       	adc	r22, r22
    1d6e:	77 1f       	adc	r23, r23
    1d70:	88 1f       	adc	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	1a 94       	dec	r1
    1d76:	69 f7       	brne	.-38     	; 0x1d52 <__udivmodsi4_loop>
    1d78:	60 95       	com	r22
    1d7a:	70 95       	com	r23
    1d7c:	80 95       	com	r24
    1d7e:	90 95       	com	r25
    1d80:	9b 01       	movw	r18, r22
    1d82:	ac 01       	movw	r20, r24
    1d84:	bd 01       	movw	r22, r26
    1d86:	cf 01       	movw	r24, r30
    1d88:	08 95       	ret

00001d8a <__prologue_saves__>:
    1d8a:	2f 92       	push	r2
    1d8c:	3f 92       	push	r3
    1d8e:	4f 92       	push	r4
    1d90:	5f 92       	push	r5
    1d92:	6f 92       	push	r6
    1d94:	7f 92       	push	r7
    1d96:	8f 92       	push	r8
    1d98:	9f 92       	push	r9
    1d9a:	af 92       	push	r10
    1d9c:	bf 92       	push	r11
    1d9e:	cf 92       	push	r12
    1da0:	df 92       	push	r13
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	ca 1b       	sub	r28, r26
    1db4:	db 0b       	sbc	r29, r27
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	09 94       	ijmp

00001dc2 <__epilogue_restores__>:
    1dc2:	2a 88       	ldd	r2, Y+18	; 0x12
    1dc4:	39 88       	ldd	r3, Y+17	; 0x11
    1dc6:	48 88       	ldd	r4, Y+16	; 0x10
    1dc8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1dca:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dcc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1dce:	8c 84       	ldd	r8, Y+12	; 0x0c
    1dd0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1dd2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1dd4:	b9 84       	ldd	r11, Y+9	; 0x09
    1dd6:	c8 84       	ldd	r12, Y+8	; 0x08
    1dd8:	df 80       	ldd	r13, Y+7	; 0x07
    1dda:	ee 80       	ldd	r14, Y+6	; 0x06
    1ddc:	fd 80       	ldd	r15, Y+5	; 0x05
    1dde:	0c 81       	ldd	r16, Y+4	; 0x04
    1de0:	1b 81       	ldd	r17, Y+3	; 0x03
    1de2:	aa 81       	ldd	r26, Y+2	; 0x02
    1de4:	b9 81       	ldd	r27, Y+1	; 0x01
    1de6:	ce 0f       	add	r28, r30
    1de8:	d1 1d       	adc	r29, r1
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	ed 01       	movw	r28, r26
    1df6:	08 95       	ret

00001df8 <atoi>:
    1df8:	fc 01       	movw	r30, r24
    1dfa:	88 27       	eor	r24, r24
    1dfc:	99 27       	eor	r25, r25
    1dfe:	e8 94       	clt
    1e00:	21 91       	ld	r18, Z+
    1e02:	20 32       	cpi	r18, 0x20	; 32
    1e04:	e9 f3       	breq	.-6      	; 0x1e00 <atoi+0x8>
    1e06:	29 30       	cpi	r18, 0x09	; 9
    1e08:	10 f0       	brcs	.+4      	; 0x1e0e <atoi+0x16>
    1e0a:	2e 30       	cpi	r18, 0x0E	; 14
    1e0c:	c8 f3       	brcs	.-14     	; 0x1e00 <atoi+0x8>
    1e0e:	2b 32       	cpi	r18, 0x2B	; 43
    1e10:	41 f0       	breq	.+16     	; 0x1e22 <atoi+0x2a>
    1e12:	2d 32       	cpi	r18, 0x2D	; 45
    1e14:	39 f4       	brne	.+14     	; 0x1e24 <atoi+0x2c>
    1e16:	68 94       	set
    1e18:	04 c0       	rjmp	.+8      	; 0x1e22 <atoi+0x2a>
    1e1a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__mulhi_const_10>
    1e1e:	82 0f       	add	r24, r18
    1e20:	91 1d       	adc	r25, r1
    1e22:	21 91       	ld	r18, Z+
    1e24:	20 53       	subi	r18, 0x30	; 48
    1e26:	2a 30       	cpi	r18, 0x0A	; 10
    1e28:	c0 f3       	brcs	.-16     	; 0x1e1a <atoi+0x22>
    1e2a:	1e f4       	brtc	.+6      	; 0x1e32 <atoi+0x3a>
    1e2c:	90 95       	com	r25
    1e2e:	81 95       	neg	r24
    1e30:	9f 4f       	sbci	r25, 0xFF	; 255
    1e32:	08 95       	ret

00001e34 <__mulhi_const_10>:
    1e34:	7a e0       	ldi	r23, 0x0A	; 10
    1e36:	97 9f       	mul	r25, r23
    1e38:	90 2d       	mov	r25, r0
    1e3a:	87 9f       	mul	r24, r23
    1e3c:	80 2d       	mov	r24, r0
    1e3e:	91 0d       	add	r25, r1
    1e40:	11 24       	eor	r1, r1
    1e42:	08 95       	ret

00001e44 <_exit>:
    1e44:	f8 94       	cli

00001e46 <__stop_program>:
    1e46:	ff cf       	rjmp	.-2      	; 0x1e46 <__stop_program>
